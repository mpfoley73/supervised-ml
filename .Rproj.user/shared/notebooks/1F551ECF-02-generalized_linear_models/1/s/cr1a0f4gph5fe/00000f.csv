"0","cs2$rec <-"
"0","  # The `data` argument can be the base data, or training, or even testing. "
"0","  # recipe() only uses it to catalog variable names and data types."
"0","  recipe(prog ~ ses + write, data = cs2$dat) %>%"
"0","  # You could have specified the formula as prog ~ ., then assigned roles. E.g.,"
"0","  # Keep ""id"" in data set, but don't use it in the model like this:"
"0","  # update_role(id, new_role = ""ID"") %>%"
"0","  # Unlike parsnip, recipe does not automatically create dummy vars."
"0","  step_dummy(all_nominal_predictors()) %>%"
"0","  # Not relevant here, but good practice: if a factor level has few values, it may"
"0","  # not appear in the training set. If so, its dummy will contain a single value"
"0","  # (0). You can prevent that by dropping zero-value cols."
"0","  step_zv(all_predictors()) %>%"
"0","  # Set the reference level of the outcome here if you want."
"0","  step_relevel(prog, ref_level = ""academic"") %>%"
"0","  # Normalize write."
"0","  step_normalize(write)"
"0",""
"0","# The workflow pairs the model and recipe."
"0","cs2$wflow <-"
"0","  workflow() %>%"
"0","  add_model(cs2$model) %>%"
"0","  add_recipe(cs2$rec)"
"0",""
"0","# Fit the training data set for a predictive model."
"0","cs2$fit_training <-"
"0","  cs2$wflow %>%"
"0","  fit(data = cs2$dat_training)"
"0",""
"0","# You can't extract the engine fit and pipe into summary. Seems like a bug"
"0","# cs2$result_training <- cs2$fit_training %>% extract_fit_engine()"
