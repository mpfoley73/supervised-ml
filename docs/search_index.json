[["generalized-linear-models-glm.html", "Chapter 2 Generalized Linear Models (GLM) 2.1 Binomial Logistic Regression 2.2 Multinomial Logistic Regression 2.3 Ordinal Logistic Regression 2.4 Poisson Regression", " Chapter 2 Generalized Linear Models (GLM) The linear regression model, \\(E(y|X) = X \\beta\\), structured as \\(y_i = X_i \\beta + \\epsilon_i\\) where \\(X_i \\beta = \\mu_i\\), assumes the response is a linear function of the predictors and the residuals are independent random variables normally distributed with zero mean and constant variance, \\(\\epsilon \\sim N \\left(0, \\sigma^2 \\right)\\). This implies that given a set of predictors, the response is normally distributed about its expected value, \\(y_i \\sim N \\left(\\mu_i, \\sigma^2 \\right)\\). However, there are many situations where this normality assumption does not hold. Generalized linear models (GLMs) are a generalization of the linear regression model that work with non-normal response distributions.1 The response will not have a normal distribution if the underlying data-generating process is binomial (Section 2.1) or multinomial (Section 2.2), ordinal (Section 2.3), Poisson (counts, Section 2.4), or exponential (time-to-event). In these situations the linear regression model can predict probabilities and proportions outside [0, 1], or negative counts or times. GLMs solve this problem by modeling a function of the expected value of \\(y\\), \\(f(E(y|X)) = X \\beta\\). There are three components to a GLM: a random component specified by the response variable’s probability distribution (normal, binomial, etc.); a systematic component in the form \\(X\\beta\\); and a link function, \\(\\eta\\), that specifies the link between the random and systematic components and converts the response to a range of \\([-\\infty, +\\infty]\\). Linear regression is a special case of GLM where the link function is the identity function, \\(f(E(y|X)) = E(y|X)\\). For binary logistic regression, the link function is the logit, \\[f(E(y|X)) = \\log \\left( \\frac{E(y|X)}{1 - E(y|X)} \\right) = \\log \\left( \\frac{\\pi}{1 - \\pi} \\right) = \\mathrm{logit}(\\pi)\\] where \\(\\pi\\) is the response probability.2 For multinomial logistic regression, the link function is the logit again, but with respect to the baseline level, and there is set of logits (one for each non-baseline level), \\[f(E(y|X)) = \\log \\left( \\frac{E(y_j|X)}{E(y_{j^*}|X)} \\right) = \\log \\left( \\frac{\\pi_j}{\\pi_{j^*}} \\right) = \\mathrm{logit}(\\pi_j)\\] Where \\(j\\) is a level in the dependent variable and \\(j^*\\) is the baseline level. For Poisson regression, the link function is \\[f(E(y|X)) = \\ln (E(y|X)) = \\ln(\\lambda)\\] where \\(\\lambda\\) is the expected event rate. For exponential regression, the link function is \\[f(E(y|X) = -E(y|X) = -\\lambda\\] where \\(\\lambda\\) is the expected time to event. GLM uses maximum likelihood estimation (MLE) rather than ordinary least squares (OLS) to estimate the parameters, and thus relies on large-sample approximations. Fit a GLM just like an linear model, but with the glm() function, specifying the distribution with the family = c(\"gaussian\", \"binomial\", \"poisson\") parameter. Fit a mulinomial logistic regression model with nnet::multinom(). 2.1 Binomial Logistic Regression Logistic regression estimates the probability that a categorical dependent variable is a particular level. The dependent variable levels can be binomial, multinomial, or ordinal. The binary logistic regression model is \\[y_i = \\mathrm{logit}(\\pi_i) = \\log \\left( \\frac{\\pi_i}{1 - \\pi_i} \\right) = X_i \\beta\\] where \\(\\pi_i\\) is the response \\(i\\)’s binary level probability. The model predicts the log odds of the level. Why do this? The range of outcomes need to be between 0 and 1, and a sigmoid function, \\(f(y) = 1 / \\left(1 + e^y \\right)\\), does that. If the log odds of the level equals \\(X_i\\beta\\), then the odds of the level equals \\(e^{X\\beta}\\). You can solve for \\(\\pi_i\\) to get \\(\\pi = \\mathrm{odds} / (\\mathrm{odds} + 1)\\). Substituting, \\[\\pi_i = \\frac{\\exp(y_i)}{1 + \\exp(y_i)} = \\frac{e^{X_i\\beta}}{1 + e^{X_i\\beta}}\\] which you can simplify to \\(\\pi_i = 1 / (1 + e^{-X_i\\beta})\\), a sigmoid function. The upshot is \\(X\\beta\\) is the functional relationship between the independent variables and a function of the response, not the response itself. The model parameters are estimated either by iteratively reweighted least squares optimization or by maximum likelihood estimation (MLE). MLE maximizes the probability produced by a set of parameters \\(\\beta\\) given a data set and probability distribution.3 In logistic regression the probability distribution is the binomial and each observation is the outcome of a single Bernoulli trial. \\[L(\\beta; y, X) = \\prod_{i=1}^n \\pi_i^{y_i}(1 - \\pi_i)^{(1-y_i)} = \\prod_{i=1}^n\\frac{\\exp(y_i X_i \\beta)}{1 + \\exp(X_i \\beta)}.\\] In practice, multiplying many small probabilities can be unstable, so MLE optimizes the log likelihood instead. \\[\\begin{align} l(\\beta; y, X) &amp;= \\sum_{i = 1}^n \\left(y_i \\log(\\pi_i) + (1 - y_i) \\log(1 - \\pi_i) \\right) \\\\ &amp;= \\sum_{i = 1}^n \\left(y_i X_i \\beta - \\log(1 + e^{X_i\\beta}) \\right) \\end{align}\\] Sometimes you will see the cost function optimized. The cost function is the negative of of the log likelihood function. Assumptions The binomial logistic regression model requires a dichotomous dependent variable and independent observations. The sample size should be large, at least 10 observations per dependent variable level and independent variable. There are three conditions related to the data distribution: i) the logit transformation must be linearly related to any continuous independent variables, ii) there must be no multicollinearity, and iii) there must be no influential outliers. Be aware of over-dispersion, a common issue with GLM. For a binomial logistic regression, the response variable should be distributed \\(y_i \\sim \\mathrm{Bin}(n_i, \\pi_i)\\) with \\(\\mu_i = n_i \\pi_i\\) and \\(\\sigma^2 = \\pi (1 - \\pi)\\). Over-dispersion means the data shows evidence of variance greater than \\(\\sigma^2\\). Case Study This case study uses the Laerd Statistics article on binomial logistic regression data set. A study investigates the relationship between the incidence of heart disease (Yes|No) and age, weight, gender, and maximal aerobic capacity using data from n = 100 participants. cs1 &lt;- list() cs1$dat &lt;- foreign::read.spss(&quot;./input/logistic-regression.sav&quot;, to.data.frame = TRUE) cs1$dat %&gt;% gtsummary::tbl_summary( by = heart_disease, include = -caseno, percent = &quot;row&quot;, statistic = list(gtsummary::all_continuous() ~ &quot;{mean}, {sd}&quot;) ) #vgjobwqmow table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #vgjobwqmow thead, #vgjobwqmow tbody, #vgjobwqmow tfoot, #vgjobwqmow tr, #vgjobwqmow td, #vgjobwqmow th { border-style: none; } #vgjobwqmow p { margin: 0; padding: 0; } #vgjobwqmow .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #vgjobwqmow .gt_caption { padding-top: 4px; padding-bottom: 4px; } #vgjobwqmow .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #vgjobwqmow .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #vgjobwqmow .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #vgjobwqmow .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vgjobwqmow .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #vgjobwqmow .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #vgjobwqmow .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #vgjobwqmow .gt_column_spanner_outer:first-child { padding-left: 0; } #vgjobwqmow .gt_column_spanner_outer:last-child { padding-right: 0; } #vgjobwqmow .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #vgjobwqmow .gt_spanner_row { border-bottom-style: hidden; } #vgjobwqmow .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #vgjobwqmow .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #vgjobwqmow .gt_from_md > :first-child { margin-top: 0; } #vgjobwqmow .gt_from_md > :last-child { margin-bottom: 0; } #vgjobwqmow .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #vgjobwqmow .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #vgjobwqmow .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #vgjobwqmow .gt_row_group_first td { border-top-width: 2px; } #vgjobwqmow .gt_row_group_first th { border-top-width: 2px; } #vgjobwqmow .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #vgjobwqmow .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #vgjobwqmow .gt_first_summary_row.thick { border-top-width: 2px; } #vgjobwqmow .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vgjobwqmow .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #vgjobwqmow .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #vgjobwqmow .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #vgjobwqmow .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #vgjobwqmow .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #vgjobwqmow .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #vgjobwqmow .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #vgjobwqmow .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #vgjobwqmow .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #vgjobwqmow .gt_left { text-align: left; } #vgjobwqmow .gt_center { text-align: center; } #vgjobwqmow .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #vgjobwqmow .gt_font_normal { font-weight: normal; } #vgjobwqmow .gt_font_bold { font-weight: bold; } #vgjobwqmow .gt_font_italic { font-style: italic; } #vgjobwqmow .gt_super { font-size: 65%; } #vgjobwqmow .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #vgjobwqmow .gt_asterisk { font-size: 100%; vertical-align: 0; } #vgjobwqmow .gt_indent_1 { text-indent: 5px; } #vgjobwqmow .gt_indent_2 { text-indent: 10px; } #vgjobwqmow .gt_indent_3 { text-indent: 15px; } #vgjobwqmow .gt_indent_4 { text-indent: 20px; } #vgjobwqmow .gt_indent_5 { text-indent: 25px; } Characteristic No, N = 651 Yes, N = 351 age 39, 8 45, 9 weight 77, 14 85, 15 gender     Female 29 (78%) 8 (22%)     Male 36 (57%) 27 (43%) VO2max 45, 9 41, 6 1 Mean, SD; n (%) Overall, men are twice as likely to have heart disease. Male odds are .43/.57 = 0.8 and female odds are .22/.78 = 0.3, an male-to-female odds ratio of 2.7. cs1$dat %&gt;% gtsummary::tbl_cross(row = heart_disease, col = gender, percent = &quot;col&quot;) #egwwqjxivc table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #egwwqjxivc thead, #egwwqjxivc tbody, #egwwqjxivc tfoot, #egwwqjxivc tr, #egwwqjxivc td, #egwwqjxivc th { border-style: none; } #egwwqjxivc p { margin: 0; padding: 0; } #egwwqjxivc .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #egwwqjxivc .gt_caption { padding-top: 4px; padding-bottom: 4px; } #egwwqjxivc .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #egwwqjxivc .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #egwwqjxivc .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #egwwqjxivc .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #egwwqjxivc .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #egwwqjxivc .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #egwwqjxivc .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #egwwqjxivc .gt_column_spanner_outer:first-child { padding-left: 0; } #egwwqjxivc .gt_column_spanner_outer:last-child { padding-right: 0; } #egwwqjxivc .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #egwwqjxivc .gt_spanner_row { border-bottom-style: hidden; } #egwwqjxivc .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #egwwqjxivc .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #egwwqjxivc .gt_from_md > :first-child { margin-top: 0; } #egwwqjxivc .gt_from_md > :last-child { margin-bottom: 0; } #egwwqjxivc .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #egwwqjxivc .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #egwwqjxivc .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #egwwqjxivc .gt_row_group_first td { border-top-width: 2px; } #egwwqjxivc .gt_row_group_first th { border-top-width: 2px; } #egwwqjxivc .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #egwwqjxivc .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #egwwqjxivc .gt_first_summary_row.thick { border-top-width: 2px; } #egwwqjxivc .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #egwwqjxivc .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #egwwqjxivc .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #egwwqjxivc .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #egwwqjxivc .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #egwwqjxivc .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #egwwqjxivc .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #egwwqjxivc .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #egwwqjxivc .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #egwwqjxivc .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #egwwqjxivc .gt_left { text-align: left; } #egwwqjxivc .gt_center { text-align: center; } #egwwqjxivc .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #egwwqjxivc .gt_font_normal { font-weight: normal; } #egwwqjxivc .gt_font_bold { font-weight: bold; } #egwwqjxivc .gt_font_italic { font-style: italic; } #egwwqjxivc .gt_super { font-size: 65%; } #egwwqjxivc .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #egwwqjxivc .gt_asterisk { font-size: 100%; vertical-align: 0; } #egwwqjxivc .gt_indent_1 { text-indent: 5px; } #egwwqjxivc .gt_indent_2 { text-indent: 10px; } #egwwqjxivc .gt_indent_3 { text-indent: 15px; } #egwwqjxivc .gt_indent_4 { text-indent: 20px; } #egwwqjxivc .gt_indent_5 { text-indent: 25px; } gender Total Female Male heart_disease     No 29 (78%) 36 (57%) 65 (65%)     Yes 8 (22%) 27 (43%) 35 (35%) Total 37 (100%) 63 (100%) 100 (100%) Age, weight, and poor max aerobic capacity are positively associated with heart disease. cs1$dat %&gt;% pivot_longer(cols = c(age, weight, VO2max)) %&gt;% ggplot(aes(x = heart_disease, y = value)) + geom_boxplot(outlier.shape = NA) + geom_jitter(aes(color = name)) + facet_wrap(facets = vars(name), scales = &quot;free_y&quot;) Consider centering the continuous variables around their means to facilitate model interpretation. The intercept term in the fitted model would represent a reasonable condition, not a zero-aged, zero-weighted person with no aerobic capacity. This is the way to go if you want to present your findings in the framework of a baseline probability (or odds) and the incremental effects of the independent variables. You might also standardize the continuous vars to get a more meaningful increment. On the other hand, if you want to use your model for predicting outcomes, you’ll have to back out of the centering when you predict values. If your model is predictive rather than inferential, split the data into training/testing data sets. # For reproducibility set.seed(123) (x &lt;- initial_split(cs1$dat, prop = 0.7, strata = heart_disease)) ## &lt;Training/Testing/Total&gt; ## &lt;69/31/100&gt; cs1$dat_training &lt;- training(x) dim(cs1$dat_training) ## [1] 69 6 cs1$dat_testing &lt;- testing(x) dim(cs1$dat_testing) ## [1] 31 6 Fit the Model Fit the model using the tidymodels framework. If you want to continue using the classic methodology, the glm object is inside the tidymodels fit. The model fit returns a brief summary with the coefficients and model diagnostics. cs1$model &lt;- logistic_reg() %&gt;% set_engine(&quot;glm&quot;) %&gt;% set_mode(&quot;classification&quot;) cs1$fit &lt;- cs1$model %&gt;% fit(heart_disease ~ age + weight + VO2max + gender, data = cs1$dat) # The fit object returned by glm(). You&#39;ll need this for interpretation and # checking assumptions. cs1$result &lt;- cs1$fit %&gt;% extract_fit_engine() # If you are fitting a predictive model, use the training set. cs1$fit_training &lt;- cs1$model %&gt;% fit(heart_disease ~ age + weight + VO2max + gender, data = cs1$dat_training) cs1$result %&gt;% summary() ## ## Call: ## stats::glm(formula = heart_disease ~ age + weight + VO2max + ## gender, family = stats::binomial, data = data) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.676469 3.336079 -0.503 0.61530 ## age 0.085098 0.028160 3.022 0.00251 ** ## weight 0.005727 0.022442 0.255 0.79858 ## VO2max -0.099024 0.047944 -2.065 0.03889 * ## genderMale 1.949639 0.842413 2.314 0.02065 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 129.49 on 99 degrees of freedom ## Residual deviance: 102.09 on 95 degrees of freedom ## AIC: 112.09 ## ## Number of Fisher Scoring iterations: 5 The null deviance, G^2, is the likelihood ratio of the intercept-only model with 69 rows - 1 parameter = 99 degrees of freedom. It is the sum of the squared deviance residuals. The residual deviance is the likelihood ratio of the full model with 100 - 5 parameters = 95 degrees of freedom. The residual deviance is distributed chi-squared and can be used to test whether the model differs from the saturated model (model with as many coefficients as observations, G^2 = 0, df = 0) where \\(H_0\\) = no difference. The deviance test for lack of fit fails to reject the null hypothesis. # G^2 calculations cs1$result %&gt;% residuals(type = &quot;deviance&quot;) %&gt;% .^2 %&gt;% sum() ## [1] 102.0878 cs1$result %&gt;% deviance() ## [1] 102.0878 # df df.residual(cs1$result) ## [1] 95 # G^2 is distributed chi-squared with df degrees of freedom pchisq(deviance(cs1$result), df = df.residual(cs1$result), lower.tail = FALSE) ## [1] 0.2911469 vcdExtra::LRstats(cs1$result) ## Likelihood summary table: ## AIC BIC LR Chisq Df Pr(&gt;Chisq) ## cs1$result 112.09 125.11 102.09 95 0.2911 These two deviances, the null and residual, are shown in the ANOVA summary. An ANOVA table shows the change in deviance from successively adding each variable to the model. anova(cs1$result) ## Analysis of Deviance Table ## ## Model: binomial, link: logit ## ## Response: heart_disease ## ## Terms added sequentially (first to last) ## ## ## Df Deviance Resid. Df Resid. Dev ## NULL 99 129.49 ## age 1 11.9074 98 117.58 ## weight 1 9.1820 97 108.40 ## VO2max 1 0.5045 96 107.89 ## gender 1 5.8076 95 102.09 Deviance residuals are one of four residuals you can calculate from a binary logistic regression.4 One is the raw residual, \\(\\epsilon_i = y_i - \\hat{p}_i\\), where \\(\\hat{p}_i\\) is the predicted probability. Another is the Pearson residual, \\(r_i = \\frac{\\epsilon_i}{\\sqrt{\\hat{p}_i(1 - \\hat{p}_i)}}\\), the raw residual rescaled by dividing by the estimated standard deviation of a binomial distribution with 1 trial5. A third is the standardized Pearson residual, \\(rs_i = r_i / \\sqrt{1 - \\hat{h}_i}\\), the Pearson residual adjusted for the leverage of the predictors using the hat-values. Hat-values measure the predictor distances from the mean. This residual is especially useful to evaluate model fit because if the model fits well, these residuals have a standard normal distribution. Finally, there are the deviance residuals, \\(d_i = \\mathrm{sign}(\\epsilon_i) \\left[ -2(y_i \\log \\hat{p}_i + (1 - y_i) \\log (1 - \\hat{p}_i)) \\right]^{.5}\\). Deviance Residuals measure how much the estimated probabilities differ from the observed proportions of success. You want deviance residuals to be evenly distributed (in absolute values, 1Q \\(\\approx\\) 3Q, min \\(\\approx\\) max). You also want the min and max to be &lt;3 because deviance residuals are roughly approximated by a standard normal distribution. bind_rows( Raw = cs1$result %&gt;% residuals(type = &quot;response&quot;) %&gt;% summary(), Pearson = cs1$result %&gt;% residuals(type = &quot;pearson&quot;) %&gt;% summary(), `Standardized Pearson` = cs1$result %&gt;% rstandard(type = &quot;pearson&quot;) %&gt;% summary(), Deviance = cs1$result %&gt;% residuals(type = &quot;deviance&quot;) %&gt;% summary(), .id = &quot;Residual&quot; ) ## # A tibble: 4 × 7 ## Residual Min. `1st Qu.` Median Mean `3rd Qu.` Max. ## &lt;chr&gt; &lt;table[1d]&gt; &lt;table[1d]&gt; &lt;table[1d]&gt; &lt;tab&gt; &lt;table[1&gt; &lt;tab&gt; ## 1 Raw -0.7954587 -0.2500077 -0.1061849 -8.0… 0.3532839 0.91… ## 2 Pearson -1.9720520 -0.5773622 -0.3446596 -1.8… 0.7391867 3.34… ## 3 Standardized Pearson -2.1794172 -0.5918874 -0.3521058 -2.1… 0.7592960 3.39… ## 4 Deviance -1.7815642 -0.7585405 -0.4738051 -8.0… 0.9336278 2.23… Interpretation Before we look at the coefficient estimations, consider what it is they are predicting: the log odds of the binary response. To see what that means, plug in values for the explanatory variables to get predictions. \\(\\hat{y}\\) is the log odds of having heart disease. (mean_person &lt;- cs1$dat %&gt;% select(-caseno) %&gt;% summarize(.by = gender, across(where(is.numeric), mean))) ## gender age weight VO2max ## 1 Male 40.79365 84.83270 46.40095 ## 2 Female 41.62162 70.85324 38.91135 pred_log_odds &lt;- cs1$fit %&gt;% predict(new_data = mean_person, type = &quot;raw&quot;) names(pred_log_odds) &lt;- mean_person$gender pred_log_odds ## Male Female ## -0.3643411 -1.5819310 Exponentiate to get the odds, \\(\\exp (\\hat{y}) = \\frac{\\pi}{1 - \\pi}\\). (pred_odds &lt;- exp(pred_log_odds)) ## Male Female ## 0.6946542 0.2055777 Solve for \\(\\pi = \\frac{\\exp (\\hat{y})}{1 + \\exp (\\hat{y})}\\) to get the probability. Do the math, or use predict(type = \"prob\"). (pred_prob &lt;- pred_odds / (1 + pred_odds)) ## Male Female ## 0.4099091 0.1705222 cs1$fit %&gt;% predict(new_data = mean_person, type = &quot;prob&quot;) ## # A tibble: 2 × 2 ## .pred_No .pred_Yes ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.590 0.410 ## 2 0.829 0.171 Now let’s interpret the coefficients. cs1$fit %&gt;% tidy() ## # A tibble: 5 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -1.68 3.34 -0.503 0.615 ## 2 age 0.0851 0.0282 3.02 0.00251 ## 3 weight 0.00573 0.0224 0.255 0.799 ## 4 VO2max -0.0990 0.0479 -2.07 0.0389 ## 5 genderMale 1.95 0.842 2.31 0.0206 The intercept term is the log-odds of heart disease for the reference case. The reference case in the model is gender = “Female”, age = 0, weight = 0, and VO2max = 0. If the data was centered, the reference case would actually meaningful. cs1$fit %&gt;% predict(new_data = list(age = 0, weight = 0, VO2max = 0, gender = &quot;Female&quot;), type = &quot;raw&quot;) ## 1 ## -1.676469 Column “statistic” is the Wald \\(z\\) statistic, \\(z = \\hat{\\beta} / SE(\\hat{\\beta})\\). Its square is the Wald chi-squared statistic. The p-value is the area to the right of \\(z^2\\) in the \\(\\chi_1^2\\) density curve: cs1$fit %&gt;% tidy() %&gt;% mutate(p.chisq = map_dbl(statistic, ~pchisq(.^2, df = 1, lower.tail = FALSE))) %&gt;% pull(p.chisq) ## [1] 0.615297092 0.002511644 0.798578389 0.038885956 0.020648470 Interpret the coefficient estimates as the change in the log odds of \\(y\\) due to a one unit change in \\(x\\). If \\(\\delta = x_a - x_b\\), then a \\(\\delta\\) change in \\(x\\) is associated with a \\(\\delta \\hat{\\beta}\\) change in the log odds of \\(y\\). \\(\\beta\\) is the log odds ratio of \\(x_a\\) vs \\(x_b\\). \\[\\log \\left(\\pi / (1 - \\pi) |_{x = x_a} \\right) - \\log \\left(\\pi / (1 - \\pi) |_{x = x_b} \\right) = \\log \\left( \\frac{\\pi / (1 - \\pi) |_{x = x_a}}{\\pi / (1 - \\pi) |_{x = x_b}} \\right) = \\delta \\hat{\\beta}\\] The exponential of the coefficient estimates is the change in the odds of \\(y\\) due to a \\(\\delta\\) change in \\(x\\). \\(\\exp \\beta\\) is the odds ratio of \\(x_a\\) vs \\(x_b\\). \\[\\mathrm{odds}(y) = e^{\\delta \\hat{\\beta}}\\] cs1$fit %&gt;% tidy(exponentiate = TRUE) ## # A tibble: 5 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 0.187 3.34 -0.503 0.615 ## 2 age 1.09 0.0282 3.02 0.00251 ## 3 weight 1.01 0.0224 0.255 0.799 ## 4 VO2max 0.906 0.0479 -2.07 0.0389 ## 5 genderMale 7.03 0.842 2.31 0.0206 All covariates held equal, a male’s log odds of heart disease are 1.95 times that of a female’s (log(OR)). A male’s odds are 7.03 times that of a female’s (OR). Of course, all covariate’s are not equal - males are heavier and have higher VO2max. Let’s run the calculations with the mean predictor values for male and female. # Log OR pred_log_odds[&quot;Male&quot;] / pred_log_odds[&quot;Female&quot;] ## Male ## 0.2303142 # OR pred_odds[&quot;Male&quot;] / pred_odds[&quot;Female&quot;] ## Male ## 3.379034 A one-unit increase in any of the continuous independent variables is interpreted similarly. The reference level is unimportant since the change is constant across the range of values. A one year increase in age increases the log-odds of heart disease by a factor of 0.09, and the odds by a factor of 1.09. To calculate the effect of a decade increase in age, multiply \\(\\beta\\) by 10 before exponentiating, or raise the exponentiated coeficient by 10. The effect of a 10-year increase in age is to increase the odds of heart disease by 2.34. The odds double every ten years. oddsratio::or_glm() is a handy way to calculate odds ratios from arbitrary increments to the predictors. Here are the ORs of a 10-year age change, 10 kg weight change, and VO2max change of 5. oddsratio::or_glm( cs1$dat, cs1$result, incr = list(age = 10, weight = 25, VO2max = -12) ) ## predictor oddsratio ci_low (2.5) ci_high (97.5) increment ## 1 age 2.342 1.391 4.270 10 ## 2 weight 1.154 0.381 3.572 25 ## 3 VO2max 3.281 11.033 1.124 -12 ## 4 genderMale 7.026 1.428 40.155 Indicator variable Notice that the predicted probabilities have the sigmoidal shape of the binary relationship. augment(cs1$fit, new_data = cs1$dat, type = &quot;raw&quot;) %&gt;% ggplot(aes(x = age, color = gender)) + geom_point(aes(y = as.numeric(heart_disease == &quot;Yes&quot;))) + geom_point(aes(y = .pred_Yes), shape = 4) + geom_smooth(aes(y = .pred_Yes), se = FALSE) + labs(x = &quot;Age&quot;, y = NULL, title = &quot;Binary Fitted Line Plot&quot;) + scale_y_continuous(breaks = c(0,1), labels = c(&quot;Healthy&quot;, &quot;Heart Disease&quot;)) + theme_light() + theme(legend.position = &quot;right&quot;) Assumptions Four assumptions relate to the study design: (1) the dependent variable is dichotomous; (2) the observations are independent; (3) the categories of all nominal variables are mutually exclusive and exhaustive; and (4) there are at least 10 observations per dependent variable level and independent variable. These assumptions are all valid here. Three more assumptions related to the data distribution: There is a linear relationship between the logit transformation and the continuous independent variables. Test with a plot and with Box-Tidwell. There is no independent variable multicollinearity. Test with correlation coefficients and variance inflation factors (VIF). There are no influential outliers. Test with Cook’s distance. Test the linearity assumption first. There are two ways to do this (do both). First, fit your model, then plot the fitted values against the continuous predictors. This is the GLM analog to OLS bivariate analysis, except now the dependent variable is the logit transformation. These plotted relationships look pretty linear. cs1$fit %&gt;% augment(new_data = cs1$dat) %&gt;% pivot_longer(c(age, weight, VO2max)) %&gt;% ggplot(aes(x = value, y = .pred_Yes)) + geom_point() + facet_wrap(facets = vars(name), scales = &quot;free_x&quot;) + geom_smooth(method = &quot;lm&quot;, formula = &quot;y~x&quot;) + labs(title = &quot;Linearity Test: predicted vs continuous predictors&quot;, x = NULL) The second test for linearity is the Box-Tidwell approach. Add transformations of the continuous independent variables to the model, \\(x_{Tx} = x \\log x\\), then test their significance level in the fit. # Using non-centered vars to avoid log(0) errors. x &lt;- cs1$dat %&gt;% mutate( age_tx = log(age) * age, weight_tx = log(weight) * weight, VO2max_tx = log(VO2max) * VO2max ) cs1$boxtidwell_fit &lt;- logistic_reg() %&gt;% set_engine(&quot;glm&quot;) %&gt;% set_mode(&quot;classification&quot;) %&gt;% fit(heart_disease ~ age + weight + VO2max + gender + age_tx + weight_tx + VO2max_tx, data = x) cs1$boxtidwell_fit %&gt;% tidy() ## # A tibble: 8 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -40.6 21.7 -1.87 0.0615 ## 2 age 2.73 1.10 2.47 0.0135 ## 3 weight 0.144 0.783 0.184 0.854 ## 4 VO2max 1.32 1.82 0.724 0.469 ## 5 genderMale 1.85 0.922 2.01 0.0443 ## 6 age_tx -0.543 0.227 -2.40 0.0164 ## 7 weight_tx -0.0266 0.146 -0.182 0.855 ## 8 VO2max_tx -0.301 0.382 -0.788 0.431 Focus on the three transformed variables. age_tx is the only one with a p-value nearly &lt;.05, but it is customary to apply a Bonferroni adjustment when testing for linearity. There are eight predictors in the model (including the intercept term), so the Bonferroni adjusted p-value for age_tx is multiplied by 8. Do not reject the null hypothesis of linearity. If the relationship was nonlinear, you could try transforming the variable by raising it to \\(\\lambda = 1 + b / \\gamma\\) where \\(b\\) is the estimated coefficient of the model without the interaction terms, and \\(\\gamma\\) is the estimated coefficient of the interaction term of the model with interactions. For age, \\(b\\) is 0.085 and \\(\\gamma\\) is -0.543, so \\(\\lambda\\) = 0.843. This is approximately 1 (no transformation). It appears to be customary to apply general transformations like .5 (square root), 1/3 (cube root), ln, and the reciprocal. Now check for multicollinearity. Variance inflation factors (VIF) estimate how much the variance of a regression coefficient is inflated due to multicollinearity. When independent variables are correlated, it is difficult to say which variable really influences the dependent variable. The VIF for variable \\(i\\) is \\[ \\mathrm{VIF}_i = \\frac{1}{1 - R_i^2} \\] where \\(R_i^2\\) is the coefficient of determination (i.e., the proportion of dependent variance explained by the model) of a regression of \\(X_i\\) against all of the other predictors, \\(X_i = X_{j \\ne i} \\beta + \\epsilon\\). If \\(X_i\\) is totally unrelated to its covariates, then \\(R_i^2\\) will be zero and \\(\\mathrm{VIF}_i\\) will be 1. If \\(R_i^2\\) is .8, \\(\\mathrm{VIF}_i\\) will be 5. The rule of thumb is that \\(R_i^2 \\le 5\\) is tolerable, and \\(R_i^2 &gt; 5\\) is “highly correlated” and you have to do something about it. These are excellent. car::vif(cs1$result) ## age weight VO2max gender ## 1.035274 1.900575 2.167067 2.502538 Try calculating the \\(\\mathrm{VIF}\\) for age. I don’t know why this doesn’t work. It would work if the underlying model was OLS instead of GLM. The answer seems to be related to GVIF vs VIF, but I didn’t figure it out.) r2 &lt;- lm(age ~ weight + VO2max + gender, data = cs1$dat_training) %&gt;% summary() %&gt;% pluck(&quot;r.squared&quot;) (vif &lt;- 1 / (1 - r2)) ## [1] 1.049814 Now check for influential outliers. Predict the response probabilities and filter for the predictions more than two standard deviations from the actual value and a Cook’s Distance greater than 4/N = 0.04.6 Cook’s distance measures how much predicted values change when observation i is removed from the data. Only two fitted values were both an outlier and influential, row ids 59 and 70. An index plot of Cook’s Distance shows the two points at the far left. You might examine the observations for validity. Otherwise, proceed and explain that there were two standardized residuals with value of 2.01 and 2.27 standard deviations which were kept in the analysis. augment(cs1$result) %&gt;% mutate( id = row_number(), outlier = if_else(abs(.std.resid) &gt;= 2, &quot;Outlier&quot;, &quot;Other&quot;), influential = if_else(.cooksd &gt; 4 / nrow(cs1$dat), &quot;Influential&quot;, &quot;Other&quot;), status = case_when( outlier == &quot;Outlier&quot; &amp; influential == &quot;Influential&quot; ~ &quot;Influential Outlier&quot;, outlier == &quot;Outlier&quot; ~ &quot;Outlier&quot;, influential == &quot;Influential&quot; ~ &quot;Influential&quot;, TRUE ~ &quot;Other&quot; ) ) %&gt;% ggplot(aes(x = .fitted, y = .cooksd)) + geom_point(aes(color = status)) + geom_text(aes(label = if_else(influential == &quot;Influential&quot;, id, NA_integer_)), check_overlap = TRUE, size = 3, nudge_x = .025) + geom_hline(yintercept = 4 / nrow(cs1$dat), linetype = 2, color = &quot;goldenrod&quot;) + scale_color_manual(values = c(&quot;Influential Outlier&quot; = &quot;firebrick&quot;, &quot;Influential&quot; = &quot;goldenrod&quot;, &quot;Outlier&quot; = &quot;slategray&quot;, &quot;Other&quot; = &quot;black&quot;)) + theme(legend.position = &quot;right&quot;) + labs(title = &quot;Index Plot of Cook&#39;s Distance.&quot;, subtitle = &quot;Row id labeled for values &gt; 4 / N.&quot;) Evaluate the Fit There are several ways to evaluate the model fit. The likelihood ratio test Pseudo R-squared7. Accuracy measures Gain and ROC curves The likelihood ratio test compares the log likelihood of the fitted model to an intercept-only model. intercept_only &lt;- logistic_reg() %&gt;% set_engine(&quot;glm&quot;) %&gt;% set_mode(&quot;classification&quot;) %&gt;% fit(heart_disease ~ 1, data = cs1$dat) (cs1$lrtest &lt;- lmtest::lrtest(cs1$result, intercept_only$fit)) ## Likelihood ratio test ## ## Model 1: heart_disease ~ age + weight + VO2max + gender ## Model 2: heart_disease ~ 1 ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 5 -51.044 ## 2 1 -64.745 -4 27.402 1.649e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The fitted model is significant, \\(\\chi^2\\)(4) = 27.4, p &lt; .001. Calculate the pseuedo-R2 with DescTools::PseudoR2(). I Can’t get this to work in the tidymodels framework. Using glm() for now. x &lt;- glm(heart_disease ~ age + weight + VO2max + gender, data = cs1$dat, family = &quot;binomial&quot;) cs1$pseudo_r2 &lt;- DescTools::PseudoR2(x, which = c(&quot;CoxSnell&quot;, &quot;Nagelkerke&quot;, &quot;McFadden&quot;)) cs1$pseudo_r2 ## CoxSnell Nagelkerke McFadden ## 0.2396799 0.3301044 0.2116126 Laerd interprets this as the model explained 33.0% (Nagelkerke R2) of the variance in heart disease. This is how your would interpret R2 in an OLS model. UCLA points out that the various pseudo R-squareds measure other aspects of the model and are unique to the measured quantity. A pseudo R-squared is not very informative on its own; it is useful for comparing models. Accuracy measures formed by the cross-tabulation of observed and predicted classes is the better way to go. cs1$conf_mat &lt;- cs1$fit %&gt;% augment(new_data = cs1$dat) %&gt;% # conf_mat requires truth to be first level of the factor variable. mutate(across(c(heart_disease, .pred_class), ~fct_relevel(., &quot;Yes&quot;))) %&gt;% conf_mat(truth = heart_disease, estimate = .pred_class) cs1$conf_mat ## Truth ## Prediction Yes No ## Yes 16 10 ## No 19 55 cs1$conf_mat %&gt;% summary() ## # A tibble: 13 × 3 ## .metric .estimator .estimate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 accuracy binary 0.71 ## 2 kap binary 0.322 ## 3 sens binary 0.457 ## 4 spec binary 0.846 ## 5 ppv binary 0.615 ## 6 npv binary 0.743 ## 7 mcc binary 0.330 ## 8 j_index binary 0.303 ## 9 bal_accuracy binary 0.652 ## 10 detection_prevalence binary 0.26 ## 11 precision binary 0.615 ## 12 recall binary 0.457 ## 13 f_meas binary 0.525 cs1$conf_mat %&gt;% autoplot() The model accuracy, 71.0%, is the percent of observations correctly classified. The sensitivity, 45.7%, is the accuracy with regard to predicting positive cases. The specificity, 84.6%, is the accuracy with regard to predicting negative cases. If you are fitting a predictive model, use the testing data set for this. cs1$fit_training %&gt;% augment(new_data = cs1$dat_testing) %&gt;% conf_mat(truth = heart_disease, estimate = .pred_class) ## Truth ## Prediction No Yes ## No 16 5 ## Yes 4 6 Finally, plot the gain curve or ROC curve. In the gain curve, the x-axis is the fraction of items seen when sorted by the predicted value, and the y-axis is the cumulatively summed true outcome. The “wizard” curve is the gain curve when the data is sorted by the true outcome. If the model’s gain curve is close to the wizard curve, then the model predicts the response well. The gray area is the “gain” over a random prediction. cs1$dat_testing %&gt;% bind_cols(predict(cs1$fit, new_data = cs1$dat_testing, type = &quot;prob&quot;)) %&gt;% # event_level = &quot;second&quot; sets the second level as success yardstick::gain_curve(.pred_Yes, truth = heart_disease, event_level = &quot;second&quot;) %&gt;% autoplot() + labs(title = &quot;Gain Curve&quot;) 11 of the 31 participants had heart disease in the test data set. The gain curve encountered 6 heart disease cases (50%) within the first 8 observations (55%). It encountered all 11 heart disease cases on the 18th observation. The bottom of the grey area is the outcome of a random model. Only half the heart disease cases would be observed within 50% of the observations. The top of the grey area is the outcome of the perfect model, the “wizard curve”. Half the heart disease cases would be observed in 6/30=20% of the observations. The ROC (Receiver Operating Characteristics) curve plots sensitivity vs specificity at varying cut-off values for the probability ranging from 0 to 1. Ideally, you want very little trade-off between sensitivity and specificity, with a curve hugging the left and top axes. cs1$dat_testing %&gt;% bind_cols(predict(cs1$fit, new_data = cs1$dat_testing, type = &quot;prob&quot;)) %&gt;% # event_level = &quot;second&quot; sets the second level as success yardstick::roc_curve(.pred_Yes, truth = heart_disease, event_level = &quot;second&quot;) %&gt;% autoplot() + labs(title = &quot;ROC Curve&quot;) Reporting A binomial logistic regression was performed to ascertain the effects of age, weight, gender and VO2max on the likelihood that participants have heart disease. Linearity of the continuous variables with respect to the logit of the dependent variable was assessed via the Box-Tidwell (1962) procedure. A Bonferroni correction was applied using all eight terms in the model resulting in statistical significance being accepted when p &lt; 0.00625 (Tabachnick &amp; Fidell, 2014). Based on this assessment, all continuous independent variables were found to be linearly related to the logit of the dependent variable. There were two standardized residuals with value of 2.01 and 2.27 standard deviations, which were kept in the analysis. The logistic regression model was statistically significant, χ2(4) = 27.40, p &lt; .001. The model explained 33.0% (Nagelkerke R2) of the variance in heart disease and correctly classified 71.0% of cases. Sensitivity was 45.7%, specificity was 84.6%, positive predictive value was and negative predictive value was . Of the five predictor variables only three were statistically significant: age, gender and VO2max (as shown in Table 1). Females had 0.14 times lower odds to exhibit heart disease than males. Increasing age was associated with an increased likelihood of exhibiting heart disease, but increasing VO2max was associated with a reduction in the likelihood of exhibiting heart disease. gtsummary::tbl_regression( cs1$fit, exponentiate = TRUE ) #dmevsytvyn table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #dmevsytvyn thead, #dmevsytvyn tbody, #dmevsytvyn tfoot, #dmevsytvyn tr, #dmevsytvyn td, #dmevsytvyn th { border-style: none; } #dmevsytvyn p { margin: 0; padding: 0; } #dmevsytvyn .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #dmevsytvyn .gt_caption { padding-top: 4px; padding-bottom: 4px; } #dmevsytvyn .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #dmevsytvyn .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #dmevsytvyn .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #dmevsytvyn .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dmevsytvyn .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #dmevsytvyn .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #dmevsytvyn .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #dmevsytvyn .gt_column_spanner_outer:first-child { padding-left: 0; } #dmevsytvyn .gt_column_spanner_outer:last-child { padding-right: 0; } #dmevsytvyn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #dmevsytvyn .gt_spanner_row { border-bottom-style: hidden; } #dmevsytvyn .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #dmevsytvyn .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #dmevsytvyn .gt_from_md > :first-child { margin-top: 0; } #dmevsytvyn .gt_from_md > :last-child { margin-bottom: 0; } #dmevsytvyn .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #dmevsytvyn .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #dmevsytvyn .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #dmevsytvyn .gt_row_group_first td { border-top-width: 2px; } #dmevsytvyn .gt_row_group_first th { border-top-width: 2px; } #dmevsytvyn .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #dmevsytvyn .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #dmevsytvyn .gt_first_summary_row.thick { border-top-width: 2px; } #dmevsytvyn .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dmevsytvyn .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #dmevsytvyn .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #dmevsytvyn .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #dmevsytvyn .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #dmevsytvyn .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #dmevsytvyn .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #dmevsytvyn .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #dmevsytvyn .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #dmevsytvyn .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #dmevsytvyn .gt_left { text-align: left; } #dmevsytvyn .gt_center { text-align: center; } #dmevsytvyn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #dmevsytvyn .gt_font_normal { font-weight: normal; } #dmevsytvyn .gt_font_bold { font-weight: bold; } #dmevsytvyn .gt_font_italic { font-style: italic; } #dmevsytvyn .gt_super { font-size: 65%; } #dmevsytvyn .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #dmevsytvyn .gt_asterisk { font-size: 100%; vertical-align: 0; } #dmevsytvyn .gt_indent_1 { text-indent: 5px; } #dmevsytvyn .gt_indent_2 { text-indent: 10px; } #dmevsytvyn .gt_indent_3 { text-indent: 15px; } #dmevsytvyn .gt_indent_4 { text-indent: 20px; } #dmevsytvyn .gt_indent_5 { text-indent: 25px; } Characteristic OR1 95% CI1 p-value age 1.09 1.03, 1.16 0.003 weight 1.01 0.96, 1.05 0.8 VO2max 0.91 0.82, 0.99 0.039 gender     Female — —     Male 7.03 1.43, 40.2 0.021 1 OR = Odds Ratio, CI = Confidence Interval 2.2 Multinomial Logistic Regression The multinomial logistic regression model is \\(J - 1\\) baseline logits, \\[y_i = \\log \\left( \\frac{\\pi_{ij}}{\\pi_{ij^*}} \\right) = X_i \\beta_j, \\hspace{5mm} j \\ne j^*\\] where \\(j\\) is a level of the multinomial response variable. Whereas binomial logistic regression models the log odds of the response level, multinomial logistic regression models the log relative risk, the probability relative to the baseline \\(j^*\\) level.8 Interpret the \\(k^{th}\\) element of \\(\\beta_j\\) as the increase in log relative risk of \\(Y_i = j\\) relative to \\(Y_i = j^*\\) given a one-unit increase in the \\(k^{th}\\) element of \\(X\\), holding the other terms constant. The individual probabilities, \\(\\pi_{ij}\\), are \\[\\pi_{ij} = \\frac{\\exp(y_{ij})}{1 + \\sum_{j \\ne j^*} \\exp(y_{ij})} = \\frac{e^{X_i\\beta_j}}{1 + \\sum_{j \\ne j^*} e^{X_i\\beta_j}}\\] and for the baseline category, \\[\\pi_{ij^*} = \\frac{1}{1 + \\sum_{j \\ne j^*} \\exp(y_{ij})} = \\frac{1}{1 + \\sum_{j \\ne j^*} e^{X_i\\beta_j}}\\] Assumptions Multinomial logistic regression applies when the dependent variable is categorical. It presumes a linear relationship between the log relative risk of the dependent variable and \\(X\\) with residuals \\(\\epsilon\\) that are independent. It also assumes there is no severe multicollinearity in the predictors, and there is independence of irrelevant alternatives (IIA). IIA means the relative likelihood of being in one category compared to the base category would not change if you added other categories. Case Study This case study uses the data set from this UCLA tutorial. A study measures the association between students’ academic program (academic, general, and vocational) and their socioeconomic status (SES) (low, middle, high) and writing score. download.file( &quot;https://stats.idre.ucla.edu/stat/data/hsbdemo.dta&quot;, &quot;./input/hsbdemo.dta&quot;, mode = &quot;wb&quot; ) cs2 &lt;- list() cs2$dat &lt;- foreign::read.dta(&quot;./input/hsbdemo.dta&quot;) %&gt;% # Just keep cols relevant to study select(id, prog, ses, write) %&gt;% mutate(prog = fct_relevel(prog, &quot;academic&quot;, after = 0)) cs2$dat %&gt;% gtsummary::tbl_summary( by = prog, include = c(prog, ses, write), statistic = list(gtsummary::all_continuous() ~ &quot;{mean}, {sd}&quot;) ) %&gt;% gtsummary::add_overall() #ywchplyncn table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ywchplyncn thead, #ywchplyncn tbody, #ywchplyncn tfoot, #ywchplyncn tr, #ywchplyncn td, #ywchplyncn th { border-style: none; } #ywchplyncn p { margin: 0; padding: 0; } #ywchplyncn .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ywchplyncn .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ywchplyncn .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ywchplyncn .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ywchplyncn .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ywchplyncn .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ywchplyncn .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ywchplyncn .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ywchplyncn .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ywchplyncn .gt_column_spanner_outer:first-child { padding-left: 0; } #ywchplyncn .gt_column_spanner_outer:last-child { padding-right: 0; } #ywchplyncn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ywchplyncn .gt_spanner_row { border-bottom-style: hidden; } #ywchplyncn .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ywchplyncn .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ywchplyncn .gt_from_md > :first-child { margin-top: 0; } #ywchplyncn .gt_from_md > :last-child { margin-bottom: 0; } #ywchplyncn .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ywchplyncn .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ywchplyncn .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ywchplyncn .gt_row_group_first td { border-top-width: 2px; } #ywchplyncn .gt_row_group_first th { border-top-width: 2px; } #ywchplyncn .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ywchplyncn .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ywchplyncn .gt_first_summary_row.thick { border-top-width: 2px; } #ywchplyncn .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ywchplyncn .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ywchplyncn .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ywchplyncn .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ywchplyncn .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ywchplyncn .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ywchplyncn .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ywchplyncn .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ywchplyncn .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ywchplyncn .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ywchplyncn .gt_left { text-align: left; } #ywchplyncn .gt_center { text-align: center; } #ywchplyncn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ywchplyncn .gt_font_normal { font-weight: normal; } #ywchplyncn .gt_font_bold { font-weight: bold; } #ywchplyncn .gt_font_italic { font-style: italic; } #ywchplyncn .gt_super { font-size: 65%; } #ywchplyncn .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ywchplyncn .gt_asterisk { font-size: 100%; vertical-align: 0; } #ywchplyncn .gt_indent_1 { text-indent: 5px; } #ywchplyncn .gt_indent_2 { text-indent: 10px; } #ywchplyncn .gt_indent_3 { text-indent: 15px; } #ywchplyncn .gt_indent_4 { text-indent: 20px; } #ywchplyncn .gt_indent_5 { text-indent: 25px; } Characteristic Overall, N = 2001 academic, N = 1051 general, N = 451 vocation, N = 501 ses     low 47 (24%) 19 (18%) 16 (36%) 12 (24%)     middle 95 (48%) 44 (42%) 20 (44%) 31 (62%)     high 58 (29%) 42 (40%) 9 (20%) 7 (14%) write 53, 9 56, 8 51, 9 47, 9 1 n (%); Mean, SD Conduct a brief exploratory analysis to establish your expectations. Academic programs are associated with higher writing scores and SES. General and vocational programs are the opposite, although SES has opposing effects for general (increased probability) and vocational (decreased probability). cs2$dat %&gt;% mutate(write_bin = cut(write, breaks = 5, dig.lab = 1, right = FALSE)) %&gt;% count(prog, ses, write_bin) %&gt;% mutate(.by = c(ses, write_bin), prob = n / sum(n)) %&gt;% ggplot(aes(x = write_bin, y = prob, color = ses)) + geom_point() + geom_line(aes(group = ses)) + facet_wrap(facets = vars(prog)) + theme(legend.position = &quot;top&quot;) + labs(title = &quot;Program Proportions by SES&quot;) If your model is predictive rather than inferential, split the data into training/testing data sets. # For reproducibility set.seed(123) (x &lt;- initial_split(cs2$dat, prop = 0.7, strata = prog)) ## &lt;Training/Testing/Total&gt; ## &lt;139/61/200&gt; cs2$dat_training &lt;- training(x) dim(cs2$dat_training) ## [1] 139 4 cs2$dat_testing &lt;- testing(x) dim(cs2$dat_testing) ## [1] 61 4 Fit the Model The multinomial logitistic regression model engines all seem to be related to neural networks and advise that predictors be set on a common scale by normalizing. I have only one predictor other than SES in this model, but I’ll normalize it anyway. Normalizing write will also facilitate model interpretation. The intercept will represent a reasonable condition (average writing score) and a one-unit increase in write will represent a 1 SD increase in writing. This case study will use both the parsnip package to fit a model directly to a data set, and the recipes package to preprocess the data. parsnip is fine for most applications and it seems to be better supported by other functions, like tidy(), so stick with it for inferential applications. recipes has the advantage of being able to process data in a workflow, so you don’t have to transform new data to make predictions. See more uses of recipes on the tidy models documentation. Let’s first use parsnip to fit the full data set for an inferential application. # Create the model. This much is the same for parsnip or recipes. cs2$model &lt;- multinom_reg() %&gt;% set_engine(&quot;nnet&quot;) # For parsnip, you need to normalize the data explicitly. nnet requires dummy # vars for factor predictors, but thankfully parsnip does that implicitly. # However, I want the outcome variable base level to be &quot;academic&quot; and while # recipes can do that in pre-processing, I have to do it manually for parsnip. cs2$dat_normalized &lt;- cs2$dat %&gt;% # Cast to numeric, otherwise scale() returns an nmatrix. :( mutate(write = as.numeric(scale(write, center = TRUE, scale = TRUE))) # Fit the whole data set for an explanatory model. cs2$fit &lt;- cs2$model %&gt;% fit(prog ~ ses + write, data = cs2$dat_normalized) # Extract the fit object returned by the engine. Use for interpretation and # checking assumptions. cs2$result &lt;- cs2$fit %&gt;% extract_fit_engine() In parallel, let’s use recipes to fit a predictive model to the training data. The model object is already created, so we just need to pair a recipe object with a workflow. cs2$rec &lt;- # The `data` argument can be the base data, or training, or even testing. # recipe() only uses it to catalog variable names and data types. recipe(prog ~ ses + write, data = cs2$dat) %&gt;% # You could have specified the formula as prog ~ ., then assigned roles. E.g., # Keep &quot;id&quot; in data set, but don&#39;t use it in the model like this: # update_role(id, new_role = &quot;ID&quot;) %&gt;% # Unlike parsnip, recipe does not automatically create dummy vars. step_dummy(all_nominal_predictors()) %&gt;% # Not relevant here, but good practice: if a factor level has few values, it may # not appear in the training set. If so, its dummy will contain a single value # (0). You can prevent that by dropping zero-value cols. step_zv(all_predictors()) %&gt;% # Set the reference level of the outcome here if you want. step_relevel(prog, ref_level = &quot;academic&quot;) %&gt;% # Normalize write. step_normalize(write) # The workflow pairs the model and recipe. cs2$wflow &lt;- workflow() %&gt;% add_model(cs2$model) %&gt;% add_recipe(cs2$rec) # Fit the training data set for a predictive model. cs2$fit_training &lt;- cs2$wflow %&gt;% fit(data = cs2$dat_training) # You can&#39;t extract the engine fit and pipe into summary. Seems like a bug # cs2$result_training &lt;- cs2$fit_training %&gt;% extract_fit_engine() Let’s look at the explanatory model summary object. The model produces a set of coefficient estimates for each non-reference level of the dependent variable. The nnet engine presents the coefficient estimates, then their standard errors as a second section, but does not present the z-statistic or p-values! cs2$result %&gt;% summary() ## Call: ## nnet::multinom(formula = prog ~ ses + write, data = data, trace = FALSE) ## ## Coefficients: ## (Intercept) sesmiddle seshigh write ## general -0.2049851 -0.5332857 -1.1628363 -0.5490814 ## vocation -0.7771705 0.2913906 -0.9826773 -1.0767939 ## ## Std. Errors: ## (Intercept) sesmiddle seshigh write ## general 0.3491296 0.4437324 0.5142201 0.2029457 ## vocation 0.4111072 0.4763734 0.5955665 0.2106132 ## ## Residual Deviance: 359.9635 ## AIC: 375.9635 The residual deviance is \\(G^2 = 2 \\sum_{i,j}y_{ij} \\log \\frac{y_{ij}}{\\hat{\\pi}_{ij}}\\). Another model diagnostic is the log-likelihood, \\(-G^2 / 2\\) (not shown) and AIC. More on these in the Model Fit section. deviance(cs2$result) ## [1] 359.9635 logLik(cs2$result, sum = TRUE) ## &#39;log Lik.&#39; -179.9817 (df=8) The Wald z-statistic is \\(z = \\hat{\\beta} / SE(\\hat{\\beta})\\). Its square is the Wald chi-squared statistic. The p-value is the area to the right of \\(z^2\\) in the \\(\\chi_1^2\\) density curve. Get these from tidy(). cs2$result %&gt;% tidy() ## # A tibble: 8 × 6 ## y.level term estimate std.error statistic p.value ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 general (Intercept) -0.205 0.349 -0.587 0.557 ## 2 general sesmiddle -0.533 0.444 -1.20 0.229 ## 3 general seshigh -1.16 0.514 -2.26 0.0237 ## 4 general write -0.549 0.203 -2.71 0.00682 ## 5 vocation (Intercept) -0.777 0.411 -1.89 0.0587 ## 6 vocation sesmiddle 0.291 0.476 0.612 0.541 ## 7 vocation seshigh -0.983 0.596 -1.65 0.0989 ## 8 vocation write -1.08 0.211 -5.11 0.000000318 Interpretation Start with interpreting the dependent variable. The model fits the log relative risk of belonging to program \\(j \\in\\) [vocation, general] vs. \\(j^*\\) = academic. However, predict() returns either the risk (type = “probs”) or outcome (type = “class), not the log relative risk. Plug in values for the predictor variables to get predictions. The relative risk is \\(RR = \\exp (\\hat{y}_j) = \\pi_j / \\pi_{j^*}\\). We see here that a student of low SES and mean writing score is less likely to be in a general or vocation program than an academic program. (risk &lt;- predict(cs2$result, newdata = list(ses = &quot;low&quot;, write = 0), type = &quot;probs&quot;)) ## academic general vocation ## 0.4396833 0.3581922 0.2021246 # Relative risk. (rr &lt;- risk[-1] / risk[1]) ## general vocation ## 0.8146595 0.4597049 # Log-relative risk (the modeled outcome) (log_rr &lt;- log(rr)) ## general vocation ## -0.2049851 -0.7771705 Move on to the coefficients. Interpret \\(\\hat{\\beta}\\) as the change in the log relative risk of \\(y_j\\) relative to \\(y_{j^*}\\) due to a \\(\\delta\\) = one unit change in \\(x\\). A \\(\\delta = x_a - x_b\\) change in \\(x\\) is associated with a \\(\\delta \\hat{\\beta}\\) change. \\(\\delta\\beta\\) is the log relative risk ratio. \\[\\log \\left(\\pi_j / \\pi_{j^*} |_{x = x_a} \\right) - \\log \\left(\\pi_j / \\pi_{j^*} |_{x = x_b} \\right) = \\log \\left( \\frac{\\pi_j / \\pi_{j^*} |_{x = x_a}}{\\pi_j / \\pi_{j^*} |_{x = x_b}} \\right) = \\delta \\hat{\\beta}\\] The exponential of \\(\\hat{\\beta}\\) is the change in the relative risk of \\(y_j\\) relative to \\(y_{j^*}\\) due to a \\(\\delta\\) = one unit change in \\(x\\). \\(\\exp \\delta \\beta\\) is the relative risk ratio. \\[\\pi_j / \\pi_{j^*} |_{x = x_a} = \\exp{\\delta \\hat{\\beta}}\\] The intercept term is the log-relative risk of \\(y_j\\) relative to \\(y_{j^*}\\) for the reference case. The reference case in the model is ses = “low” and write centered at 52.8. Notice how the intercept matches the predicted values above. (ref_log_rr &lt;- coef(cs2$result)[,&quot;(Intercept)&quot;]) ## general vocation ## -0.2049851 -0.7771705 # From log-relative risk to relative risk. (ref_rr &lt;- exp(ref_log_rr)) ## general vocation ## 0.8146595 0.4597049 The log relative risks of a low SES student with a 52.8 writing score being in program general vs academic is \\(\\hat{y} = \\mathrm{Intercept}_1\\) = -0.205, and \\(\\hat{y} = \\mathrm{Intercept}_2\\) = -0.777 for vocation vs academic. The corresponding relative risks are \\(\\exp(\\hat{y}_j)\\) = 0.815 and 0.460. The expected probabilities are 44.0%, 35.8%, and 20.2% for academic, general, and vocation respectively. If SES was high instead of low, the expected probabilities of being in program general vs academic would be 70.1%, 17.8%, and 12.1% for academic, general, and vocation respectively. What if the writing score increases by 1 SD (one unit)? The log RR of being in program general vs academic change by a factor of coef(cs2$result)[\"general\", \"write\"] = -0.549, RR = 0.577. For program vocation vs academic, it would change by a factor of -1.077, RR = 0.341. To get a 2 SD increase, multiply the coefficient by 2, then exponentiate. The two RRs would then be 0.333 and 0.116. Visualize the parameter estimates by plotting the predicted values. new_data &lt;- expand.grid( ses = levels(cs2$dat$ses), write = seq(from = round(min(cs2$dat_normalized$write)), to = round(max(cs2$dat_normalized$write)), by = 1) ) bind_cols( new_data, predict(cs2$fit, new_data = new_data, type = &quot;prob&quot;) ) %&gt;% pivot_longer(cols = -c(ses, write), names_to = &quot;prog&quot;, values_to = &quot;probability&quot;) %&gt;% ggplot(aes(x = write, y = probability, color = ses)) + geom_line() + facet_wrap(facets = vars(prog)) Assumptions Four assumptions relate to the study design: (1) the dependent variable is multinomial; (2) the observations are independent; (3) the categories of all nominal variables are mutually exclusive and exhaustive; and (4) there are at least 10 observations per dependent variable level and independent variable. These assumptions are all valid. Three more assumptions related to the data distribution: There is a linear relationship between the logit transformation and the continuous independent variables. Test with a plot and with Box-Tidwell. There is no independent variable multicollinearity. Test with correlation coefficients and variance inflation factors (VIF). There are no influential outliers. Test with Cook’s distance. There are two ways to test for linearity (do both). First, plot the fitted values against the continuous predictors. This is the GLM analog to OLS bivariate analysis, except now the dependent variable is the logit transformation. These plotted relationships look good, except that in the prog = general level, writing score appears to interact with SES. cs2$fit %&gt;% augment(new_data = cs2$dat_normalized) %&gt;% pivot_longer(cols = c(.pred_academic:.pred_vocation), values_to = &quot;.fitted&quot;) %&gt;% filter(str_detect(name, as.character(prog))) %&gt;% ggplot(aes(x = write, y = .fitted, color = ses)) + geom_point() + facet_wrap(facets = vars(prog), scales = &quot;free_x&quot;) + geom_smooth(method = &quot;lm&quot;, formula = &quot;y~x&quot;) + labs(title = &quot;Linearity Test: predicted vs continuous predictors&quot;, x = NULL) The second test for linearity is the Box-Tidwell approach. Add transformations of the continuous independent variables to the model, \\(x_{Tx} = x \\log x\\), then test their significance level in the fit. Focus on the transformed variable. write_tx has a p-value &lt;.05 for general. It is customary to apply a Bonferroni adjustment when testing for linearity. There are ten predictors in the model (including the intercept terms), so the Bonferroni adjusted p-values for write_tx are multiplied by 10. We should reject the null hypothesis of linearity because the adjusted p.value is still below .05. # Using non-centered vars to avoid log(0) errors. cs2$boxtidwell &lt;- cs2$dat %&gt;% mutate(write_tx = log(write) * write) %&gt;% fit(cs2$model, prog ~ ses + write + write_tx, data = .) tidy(cs2$boxtidwell) %&gt;% filter(term == &quot;write_tx&quot;) %&gt;% mutate(adj_p = p.value * 10) ## # A tibble: 2 × 7 ## y.level term estimate std.error statistic p.value adj_p ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 general write_tx 0.0713 0.0231 3.09 0.00198 0.0198 ## 2 vocation write_tx 0.0125 0.0239 0.522 0.601 6.01 If the relationship is nonlinear, you can try transforming the variable by raising it to \\(\\lambda = 1 + b / \\gamma\\) where \\(b\\) is the estimated coefficient of the model without the interaction terms, and \\(\\gamma\\) is the estimated coefficient of the interaction term of the model with interactions. For write, \\(b\\) is for general and \\(\\gamma\\) is , so \\(\\lambda\\) = 1 + / = . It seems customary to apply general transformations like .5 (square root), 1/3 (cube root), ln, and the reciprocal, so maybe try raising write_c to . It seems in this case that the better solution is to add an interaction between write_c and ses to the model. I’m not going to pursue this further here. Check for multicollinearity using variance inflation factors (VIF). VIFs estimate how much the variance of a regression coefficient is inflated due to multicollinearity. When independent variables are correlated, it is difficult to say which variable really influences the dependent variable. The VIF for variable \\(i\\) is \\[ \\mathrm{VIF}_i = \\frac{1}{1 - R_i^2} \\] where \\(R_i^2\\) is the coefficient of determination (i.e., the proportion of dependent variance explained by the model) of a regression of \\(X_i\\) against all of the other predictors, \\(X_i = X_{j \\ne i} \\beta + \\epsilon\\). If \\(X_i\\) is totally unrelated to its covariates, then \\(R_i^2\\) will be zero and \\(\\mathrm{VIF}_i\\) will be 1. If \\(R_i^2\\) is .8, \\(\\mathrm{VIF}_i\\) will be 5. The rule of thumb is that \\(R_i^2 \\le 5\\) is tolerable, and \\(R_i^2 &gt; 5\\) is “highly correlated” and you have to do something about it. car::vif() doesn’t work for multinomial logistic regression. The model type is not actually important here - we’re concerned about the covariate relationships. Below, I successively collapse the dependent variable into two-levels, then fit a binomial logistic regression and pipe that into car::vif(). tmp_fit_general &lt;- logistic_reg() %&gt;% fit( prog ~ ses + write, data = cs2$dat_normalized %&gt;% mutate(prog = fct_collapse(prog, vocation = &quot;academic&quot;)) ) %&gt;% extract_fit_engine() tmp_fit_general %&gt;% car::vif() ## GVIF Df GVIF^(1/(2*Df)) ## ses 1.037207 2 1.009175 ## write 1.037207 1 1.018433 tmp_fit_vocation &lt;- logistic_reg() %&gt;% fit( prog ~ ses + write, data = cs2$dat_normalized %&gt;% mutate(prog = fct_collapse(prog, general = &quot;academic&quot;)) ) %&gt;% extract_fit_engine() tmp_fit_vocation %&gt;% car::vif() ## GVIF Df GVIF^(1/(2*Df)) ## ses 1.020017 2 1.004967 ## write 1.020017 1 1.009959 Check for influential outliers. Outliers are predicted values greater than two standard deviations from the actual value. Influential points have a Cook’s Distance greater than 4/N (4 / 200 = 0.02.9 Influential outliers are both. There is no simple way to do this for the multinomial regression because neither VGAM nor nnet support the augment() generic. Instead, I will use the two binomial logistic regressions from the VIF diagnostic. outlier_dat &lt;- bind_rows( general = augment(tmp_fit_general, type.predict = &quot;response&quot;), vocation = augment(tmp_fit_vocation, type.predict = &quot;response&quot;), .id = &quot;logit&quot; ) %&gt;% mutate( id = row_number(), outlier = if_else(abs(.std.resid) &gt;= 2, &quot;Outlier&quot;, &quot;Other&quot;), influential = if_else(.cooksd &gt; 4 / nrow(cs1$dat), &quot;Influential&quot;, &quot;Other&quot;), status = case_when( outlier == &quot;Outlier&quot; &amp; influential == &quot;Influential&quot; ~ &quot;Influential Outlier&quot;, outlier == &quot;Outlier&quot; ~ &quot;Outlier&quot;, influential == &quot;Influential&quot; ~ &quot;Influential&quot;, TRUE ~ &quot;Other&quot; ), status = factor(status, levels = c(&quot;Influential&quot;, &quot;Outlier&quot;, &quot;Influential Outlier&quot;, &quot;Other&quot;)) ) outlier_dat %&gt;% ggplot(aes(x = .fitted, y = .cooksd)) + geom_point(aes(color = status)) + geom_text(aes(label = if_else(influential == &quot;Influential&quot;, id, NA_integer_)), check_overlap = TRUE, size = 3, nudge_x = .025) + geom_hline(yintercept = 4 / nrow(cs1$dat), linetype = 2, color = &quot;goldenrod&quot;) + scale_color_manual(values = c(&quot;Influential Outlier&quot; = &quot;firebrick&quot;, &quot;Influential&quot; = &quot;goldenrod&quot;, &quot;Outlier&quot; = &quot;salmon&quot;, &quot;Other&quot; = &quot;black&quot;)) + theme(legend.position = &quot;right&quot;) + labs(title = &quot;Index Plot of Cook&#39;s Distance.&quot;, subtitle = &quot;Row id labeled for influential points.&quot;) + facet_wrap(facets = vars(logit), ncol = 1) ## Warning: Removed 396 rows containing missing values (`geom_text()`). No fitted values were influential outliers in the first fit, and only two were influential outliers in the second fit. (cs2$outliers &lt;- outlier_dat %&gt;% filter(status == &quot;Influential Outlier&quot;) %&gt;% pull(.std.resid)) ## [1] 2.202098 2.593458 An index plot of Cook’s Distance shows the two points at the far left. You might examine the observations for validity. Otherwise, proceed and explain that there were two standardized residuals with value of 2.20 and 2.59 standard deviations which were kept in the analysis. Evaluate the Fit There are several ways to evaluate the model fit. Deviance and chi-squared tests for lack of fit The likelihood ratio test Pseudo R-squared10. Accuracy measures Gain and ROC curves The deviance test for lack of fit and the likelihood ratio test are residuals tests. The deviance residual is defined as \\(d_i = \\mathrm{sign}(\\epsilon_i) \\left[ -2(y_i \\log \\hat{\\pi}_i + (1 - y_i) \\log (1 - \\hat{\\pi}_i)) \\right]^{.5}\\). The model deviance, \\(G^2\\), is the sum of the squared deviance residuals. It also equals \\(G^2 = 2 \\sum_{i,j}y_{ij} \\log \\frac{y_{ij}}{\\hat{\\pi}_{ij}}\\). You can calculate them by hand. # Actual values (1s and 0s for three response levels) y &lt;- cs2$dat %&gt;% mutate(val = 1) %&gt;% pivot_wider(names_from = prog, values_from = val, values_fill = 0) %&gt;% select(levels(cs2$dat$prog)) %&gt;% as.matrix() # Predicted values (probabilities for three response levels) pi &lt;- predict(cs2$result, type = &quot;prob&quot;) * 1 # Raw residuals, by hand or by formula # e &lt;- y - pi e &lt;- residuals(cs2$result, type = &quot;response&quot;) # Deviance residuals d &lt;- sign(e) * sqrt(-2 * y * log(pi) + (1 - y) * log(1 - pi)) (g2 &lt;- sum(d^2, na.rm = TRUE)) ## [1] 359.9635 (g2 &lt;- 2 * sum(y * log(y / pi), na.rm = TRUE)) ## [1] 359.9635 (g2 &lt;- deviance(cs2$result)) ## [1] 359.9635 The related Pearson statistic, \\(X\\), is the sum of the squared Pearson residuals, \\(pr_i = \\epsilon_i / \\sqrt{\\hat{\\pi}_i}\\), the raw residual scaled by dividing by the estimated standard deviation of a binomial distribution with 1 trial. I don’t see this calculated in the residual() functions. You can do it yourself. (x2 &lt;- sum((e / sqrt(pi))^2)) ## [1] 406.0656 The deviance and Pearson statistic are distributed chi-squared with \\((N - p)(r - 1)\\) degrees of freedom where \\(p\\) = 4 predictor variables (3 SES levels + intercept), and \\(r\\) = 3 levels of the dependent variable for 392 degrees of freedom. The deviance and Pearson tests for lack of fit calculate the probability of the test statistic. The null hypothesis is that the model is correct. Neither test rejects the null hypothesis. # Deviance test for lack of fit (N &lt;- nrow(cs2$dat)) ## [1] 200 (r &lt;- length(levels(cs2$dat$prog))) ## [1] 3 (p &lt;- length(coef(cs2$result)) / (r - 1)) # coefficients for each level, so divide by # levels ## [1] 4 (df &lt;- (N - p) * (r - 1)) ## [1] 392 pchisq(g2, df, lower.tail = FALSE) ## [1] 0.8755302 pchisq(x2, df, lower.tail = FALSE) ## [1] 0.3014625 You can do the same calculations for the intercept-only model. io &lt;- multinom_reg() %&gt;% fit(prog ~ 1, data = cs2$dat) %&gt;% extract_fit_engine() deviance(io) ## [1] 408.1933 # degrees of freedom ((nrow(cs2$dat) - length(coef(io)) / (r - 1)) * (r - 1)) ## [1] 398 The log-likelihood measures the unexplained variability in the model. The likelihood ratio test compares the log likelihood of the fitted model to the intercept-only model. You can use lmtest::lrtest() to test. anova() does the same thing using the residual deviance, \\(G2 = -2 \\times \\mathrm{log likelihood}\\), although it does not seem to work with the nnet engine. (cs2$lrtest &lt;- lmtest::lrtest(io, cs2$result)) ## Likelihood ratio test ## ## Model 1: prog ~ 1 ## Model 2: prog ~ ses + write ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 2 -204.10 ## 2 8 -179.98 6 48.23 1.063e-08 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # (cs2$lrtest &lt;- anova(io, cs2$result, type = &quot;I&quot;, test = &quot;LR&quot;)) The difference in deviances is \\(LR\\) = 48.23 with 6 degrees of freedom. This is distributed chi-squared, with p-value = 1.063e-08. The deviance test for lack of fit concludes that the model fits significantly better than an empty (intercept-only) model, \\(\\chi^2\\)(6) = 48.23, p &lt; .001. You can use lmtest::lrtest() to perform likelihood ratio tests on the significance of the predictors too. The likelihood ratio test compares the log likelihood with and without the predictor. Unfortunately, this does not seem to work within the parsnip framework. # (cs2$lrtest_ses &lt;- lmtest::lrtest(cs2$result, &quot;ses&quot;)) no_ses &lt;- multinom_reg() %&gt;% fit(prog ~ write, data = cs2$dat) %&gt;% extract_fit_engine() (cs2$lrtest_ses &lt;- lmtest::lrtest(cs2$result, no_ses)) ## Likelihood ratio test ## ## Model 1: prog ~ ses + write ## Model 2: prog ~ write ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 8 -179.98 ## 2 4 -185.51 -4 11.058 0.02592 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # (cs2$lrtest_write &lt;- lmtest::lrtest(cs2$fit_nnet, &quot;write&quot;)) no_write &lt;- multinom_reg() %&gt;% fit(prog ~ ses, data = cs2$dat) %&gt;% extract_fit_engine() (cs2$lrtest_write &lt;- lmtest::lrtest(cs2$result, no_write)) ## Likelihood ratio test ## ## Model 1: prog ~ ses + write ## Model 2: prog ~ ses ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 8 -179.98 ## 2 6 -195.71 -2 31.447 1.484e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Both SES, \\(X^2\\) = 11.058, p = 0.026, and writing score \\(X^2\\) = 31.447, p = 1.484e-07, had significant effects on the program. Logistic regression does not have a direct R-squared statistic like OLS does (the proportion of variance explained by the model). However, there are some analogs, called pseudo R-squared. You’ll encounter three pseudo R-squared measures: Cox and Snell, Nagelkerke, and McFadden. This one does not work for the nnet engine. # DescTools::PseudoR2(cs2$result, which = c(&quot;CoxSnell&quot;, &quot;Nagelkerke&quot;, &quot;McFadden&quot;)) Accuracy measures formed by the cross-tabulation of observed and predicted classes is the better model fit diagnostic the the pseudo r-squares. cs2$conf_mat &lt;- cs2$fit %&gt;% augment(new_data = cs2$dat_normalized) %&gt;% # conf_mat requires truth to be first level of the factor variable. # mutate(across(c(prog, .pred_class), ~fct_relevel(., &quot;academic&quot;))) %&gt;% conf_mat(truth = prog, estimate = .pred_class) cs2$conf_mat ## Truth ## Prediction academic general vocation ## academic 92 27 23 ## general 4 7 4 ## vocation 9 11 23 cs2$conf_mat %&gt;% summary() ## # A tibble: 13 × 3 ## .metric .estimator .estimate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 accuracy multiclass 0.61 ## 2 kap multiclass 0.299 ## 3 sens macro 0.497 ## 4 spec macro 0.763 ## 5 ppv macro 0.550 ## 6 npv macro 0.799 ## 7 mcc multiclass 0.320 ## 8 j_index macro 0.260 ## 9 bal_accuracy macro 0.630 ## 10 detection_prevalence macro 0.333 ## 11 precision macro 0.550 ## 12 recall macro 0.497 ## 13 f_meas macro 0.491 cs1$conf_mat %&gt;% autoplot() The model accuracy, 61.0%, is the percent of observations correctly classified. The sensitivities are the accuracy with regard to predicting positive cases in each level of the dependent variable. The specificities are the accuracy with regard to predicting negative cases. The prevalences are the proportion of cases that were positive. Finally, plot the gain curve or ROC curve. In the gain curve, the x-axis is the fraction of items seen when sorted by the predicted value, and the y-axis is the cumulatively summed true outcome. The “wizard” curve is the gain curve when the data is sorted by the true outcome. If the model’s gain curve is close to the wizard curve, then the model predicts the response well. The gray area is the “gain” over a random prediction. cs2$dat_normalized %&gt;% bind_cols(predict(cs2$fit, new_data = cs2$dat_normalized, type = &quot;prob&quot;)) %&gt;% # event_level = &quot;second&quot; sets the second level as success yardstick::gain_curve(.pred_academic, .pred_general, .pred_vocation, truth = prog, event_level = &quot;second&quot;) %&gt;% autoplot() + labs(title = &quot;Gain Curve&quot;) 105 of the 200 participants were in the academic program. The gain curve encountered 52 academic programs (50%) within the first 72 observations (36%). It encountered all 105 cases on the 189th observation. The bottom of the grey area is the outcome of a random model. Only half the academic program cases would be observed within 50% of the observations. The top of the grey area is the outcome of the perfect model, the “wizard curve”. Half the academic program cases would be observed in 52.5/200=26.25% of the observations. The ROC (Receiver Operating Characteristics) curve plots sensitivity vs specificity at varying cut-off values for the probability ranging from 0 to 1. Ideally, you want very little trade-off between sensitivity and specificity, with a curve hugging the left and top axes. cs2$dat_normalized %&gt;% bind_cols(predict(cs2$fit, new_data = cs2$dat_normalized, type = &quot;prob&quot;)) %&gt;% # event_level = &quot;second&quot; sets the second level as success yardstick::roc_curve(.pred_academic, .pred_general, .pred_vocation, truth = prog, event_level = &quot;second&quot;) %&gt;% autoplot() + labs(title = &quot;Gain Curve&quot;) Reporting A multinomial logistic regression was performed to ascertain the effects of socioeconomic status (ses) and writing score on the likelihood that participants are enrolled in an academic, general, or vocation program. Linearity of the continuous variables with respect to the logit of the dependent variable was assessed via the Box-Tidwell (1962) procedure. A Bonferroni correction was applied using all eight terms in the model resulting in statistical significance being accepted when p &lt; 0.00625 (Tabachnick &amp; Fidell, 2014). Based on this assessment, the continuous write independent variable was found to be linearly related to the logit of the dependent variable levels. There were two standardized residuals with value of 2.20 and 2.59 standard deviations, which were kept in the analysis. The multinomial logistic regression model was statistically significant, \\(\\chi^2\\)(6) = 48.23, p &lt; .001. The model correctly classified 61% of cases. Sensitivity was 50%, specificity was 76%, positive predictive value was 55% and negative predictive value was 80%. The write predictor variable was statistically significant for both outcome levels and high SES was statistically significant for the general program (as shown in Table 1). A 1SD increase in the writing score was associated with a (1 - 0.58) decrease in the odds of choosing a general program instead of academic and a (1 - 0.34) decrease in the odds of choosing a vocation program over academic. A high SEC was associated with a (1 - 0.31) decrease in the odds of chooseing a general program over academic. gtsummary::tbl_regression( cs2$result, exponentiate = TRUE ) %&gt;% gtsummary::as_flex_table() %&gt;% flextable::theme_apa() .cl-2e5813f6{}.cl-2e321098{font-family:'Times New Roman';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2e321106{font-family:'Times New Roman';font-size:6.6pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;position: relative;bottom:3.3pt;}.cl-2e32111a{font-family:'Times New Roman';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-2e3f8a52{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:2pt;padding-top:2pt;padding-left:5pt;padding-right:5pt;line-height: 2;background-color:transparent;}.cl-2e3f8a70{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 2;background-color:transparent;}.cl-2e3f8a84{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:15pt;padding-right:5pt;line-height: 2;background-color:transparent;}.cl-2e3ff91a{width:0.947in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0.75pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff938{width:1.304in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0.75pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff94c{width:0.583in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0.75pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff956{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0.75pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff96a{width:0.82in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0.75pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff974{width:0.947in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff97e{width:1.304in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff992{width:0.583in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff99c{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff9a6{width:0.82in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff9b0{width:0.947in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff9ba{width:1.304in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff9c4{width:0.583in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff9d8{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff9e2{width:0.82in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff9ec{width:0.947in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ff9f6{width:1.304in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa00{width:0.583in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa0a{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa1e{width:0.82in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa28{width:0.947in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa3c{width:1.304in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa46{width:0.583in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa50{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa64{width:0.82in;background-color:transparent;vertical-align: middle;border-bottom: 0.75pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa6e{width:0.947in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa78{width:1.304in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa82{width:0.583in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa8c{width:0.965in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-2e3ffa8d{width:0.82in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(255, 255, 255, 0.00);border-top: 0 solid rgba(255, 255, 255, 0.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}OutcomeCharacteristicOR195% CI1p-valuegeneralseslow——middle0.590.25, 1.400.2high0.310.11, 0.860.024write0.580.39, 0.860.007vocationseslow——middle1.340.53, 3.400.5high0.370.12, 1.200.10write0.340.23, 0.51&lt;0.0011OR = Odds Ratio, CI = Confidence Interval 2.3 Ordinal Logistic Regression Ordinal logistic regression, also call cumulative link model (CLM), is a generalized linear model (GZLM), an extension of the general linear model (GLM) to non-continuous outcome variables. There are many approaches to ordinal logistic regression, including cumulative, adjacent, and continuation categories, but the most popular is the cumulative odds ordinal logistic regression with proportional odds.11. The model for ordinal response random variable \\(Y_i\\) with \\(J\\) levels is \\[\\gamma_{ij} = F(\\eta_{ij}), \\hspace{5 mm} \\eta_{ij} = \\theta_j - x_i^\\mathrm{T}\\beta, \\hspace{5 mm} i = 1, \\ldots, n, \\hspace{5 mm} j = 1, \\ldots, J-1\\] where \\(\\gamma_{ij} = P(Y_i \\le j) = \\pi_{i1} + \\cdots + \\pi_{ij}\\). \\(\\eta_{ij}\\) is a linear predictor with \\(J-1\\) intercepts. \\(F\\) is the inverse link function. The regression models the logit link function of \\(\\gamma_{ij}\\). \\[\\mathrm{logit}(\\gamma_{ij}) = \\log \\left[\\frac{P(Y_i \\le j)}{P(Y_i \\gt j)} \\right] = \\theta_j - x_i^\\mathrm{T}\\beta\\] The cumulative logit is the log-odds of the cumulative probabilities that the response is in category \\(\\le j\\) versus \\(\\gt j\\). \\(\\theta_j\\) is the log-odds when \\(x_i^\\mathrm{T}=0\\) and \\(\\beta\\) is the increase in the log odds attributed to a one unit increase in \\(x_i^\\mathrm{T}\\). Notice \\(\\beta\\) is the same for all \\(j\\). The exponential of the predicted value is the odds. Solve this for the probability, \\[P(Y_i \\gt j) = \\frac{\\mathrm{exp}(\\hat{y}_i)}{1 + \\mathrm{exp}(\\hat{y}_i)}.\\] The exponential of \\(\\beta\\) is the odds ratio of \\(x_1^\\mathrm{T} - x_0^\\mathrm{T}\\). Solve this for the odds ratio \\[\\mathrm{OR} = \\frac{\\mathrm{exp}(\\theta_j - x_1^\\mathrm{T}\\beta)}{\\mathrm{exp}(\\theta_j - x_2^\\mathrm{T}\\beta)} = \\mathrm{exp}(\\beta(x_1^\\mathrm{T} - x_0^\\mathrm{T}))\\] If \\(x\\) is a binary factor factor, then \\(\\exp(\\beta)\\) is the odds ratio of \\(x=1\\) vs \\(x=0\\). Thus the odds-ratio is proportional to the difference between values of \\(x\\) and \\(\\beta\\) is the constant of proportionality. The model is estimated with a regularized Newton-Raphson algorithm with step-halving (line search) using analytic expressions for the gradient and Hessian of the negative log-likelihood function. This is beyond me, but the upshot is that the estimation is an iterative maximization exercise, not a formulaic matrix algebra process. It is possible for the model estimation to fail to converge on a maximum. You will sometimes encounter discussion about the latent variable. That is just the underlying quality you are trying to measure. If you rate something a 4 on a 5-level Likert scale, 4 is the expression of your valuation, the latent variable. Your precise valuation is somewhere between 3 and 5 on a continuous scale. The link function defines the distribution of the latent variable. There are variations on the ordinal model. Structured thresholds impose restrictions on \\(\\theta_j\\), for example requiring equal distances between levels. Partial proportional odds allow \\(\\theta_j\\) to vary with nominal predictors. You can also use link functions other than logit. There are two assumptions underling ordinal logistic regression: (a) no multicollinearity, and (b) proportional odds. Case Study This case study uses the Laerd Statistics article on ordinal logistic regression data set. A study investigates the relationship between attitude toward tax levels and participant values and background. 192 participants in a study responded to the statement “Taxes are too high” on a 4-level Likert scale (tax_too_high, Strongly Disagree, Disagree, Agree, Strongly Agree). Participant attributes include business owner (Y|N), age, and political affiliation (Liberal, Conservative, Labor). cs3 &lt;- list() cs3$dat &lt;- foreign::read.spss(&quot;./input/ordinal-logistic-regression.sav&quot;, to.data.frame = TRUE) %&gt;% mutate(tax_too_high = factor(tax_too_high, ordered = TRUE), biz_owner = fct_relevel(biz_owner, &quot;No&quot;, &quot;Yes&quot;), politics = fct_relevel(politics, &quot;Lab&quot;)) %&gt;% select(-c(biz_friends, uni_educated, income)) cs3$dat %&gt;% gtsummary::tbl_summary( by = politics, statistic = list(gtsummary::all_continuous() ~ &quot;{mean} ({sd})&quot;) ) #hcdtlvqjtk table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #hcdtlvqjtk thead, #hcdtlvqjtk tbody, #hcdtlvqjtk tfoot, #hcdtlvqjtk tr, #hcdtlvqjtk td, #hcdtlvqjtk th { border-style: none; } #hcdtlvqjtk p { margin: 0; padding: 0; } #hcdtlvqjtk .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #hcdtlvqjtk .gt_caption { padding-top: 4px; padding-bottom: 4px; } #hcdtlvqjtk .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #hcdtlvqjtk .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #hcdtlvqjtk .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hcdtlvqjtk .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hcdtlvqjtk .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #hcdtlvqjtk .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #hcdtlvqjtk .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #hcdtlvqjtk .gt_column_spanner_outer:first-child { padding-left: 0; } #hcdtlvqjtk .gt_column_spanner_outer:last-child { padding-right: 0; } #hcdtlvqjtk .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #hcdtlvqjtk .gt_spanner_row { border-bottom-style: hidden; } #hcdtlvqjtk .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #hcdtlvqjtk .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #hcdtlvqjtk .gt_from_md > :first-child { margin-top: 0; } #hcdtlvqjtk .gt_from_md > :last-child { margin-bottom: 0; } #hcdtlvqjtk .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #hcdtlvqjtk .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #hcdtlvqjtk .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #hcdtlvqjtk .gt_row_group_first td { border-top-width: 2px; } #hcdtlvqjtk .gt_row_group_first th { border-top-width: 2px; } #hcdtlvqjtk .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hcdtlvqjtk .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #hcdtlvqjtk .gt_first_summary_row.thick { border-top-width: 2px; } #hcdtlvqjtk .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hcdtlvqjtk .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #hcdtlvqjtk .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #hcdtlvqjtk .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #hcdtlvqjtk .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #hcdtlvqjtk .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #hcdtlvqjtk .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hcdtlvqjtk .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #hcdtlvqjtk .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #hcdtlvqjtk .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #hcdtlvqjtk .gt_left { text-align: left; } #hcdtlvqjtk .gt_center { text-align: center; } #hcdtlvqjtk .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #hcdtlvqjtk .gt_font_normal { font-weight: normal; } #hcdtlvqjtk .gt_font_bold { font-weight: bold; } #hcdtlvqjtk .gt_font_italic { font-style: italic; } #hcdtlvqjtk .gt_super { font-size: 65%; } #hcdtlvqjtk .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #hcdtlvqjtk .gt_asterisk { font-size: 100%; vertical-align: 0; } #hcdtlvqjtk .gt_indent_1 { text-indent: 5px; } #hcdtlvqjtk .gt_indent_2 { text-indent: 10px; } #hcdtlvqjtk .gt_indent_3 { text-indent: 15px; } #hcdtlvqjtk .gt_indent_4 { text-indent: 20px; } #hcdtlvqjtk .gt_indent_5 { text-indent: 25px; } Characteristic Lab, N = 621 Lib, N = 541 Con, N = 761 biz_owner 36 (58%) 26 (48%) 47 (62%) age 37.4 (5.6) 35.4 (5.8) 37.2 (4.8) tax_too_high     Strongly Disagree 10 (16%) 10 (19%) 4 (5.3%)     Disagree 13 (21%) 16 (30%) 9 (12%)     Agree 28 (45%) 21 (39%) 42 (55%)     Strongly Agree 11 (18%) 7 (13%) 21 (28%) 1 n (%); Mean (SD) cs3$dat %&gt;% mutate(age = case_when(age &lt; quantile(age, .33) ~ &quot;young&quot;, age &lt; quantile(age, .67) ~ &quot;middle&quot;, TRUE ~ &quot;old&quot;), age = factor(age, levels = c(&quot;young&quot;, &quot;middle&quot;, &quot;old&quot;))) %&gt;% count(tax_too_high, biz_owner, age, politics) %&gt;% ggplot(aes(x = tax_too_high, y = n, fill = biz_owner)) + geom_col(position = position_dodge2(preserve = &quot;single&quot;)) + facet_grid(rows = vars(age), cols = vars(politics), space = &quot;free&quot;) + scale_x_discrete(labels = function (x) str_wrap(x, width = 10)) + theme_bw() + theme(legend.position = &quot;bottom&quot;) + labs(title = &quot;Taxes too high?&quot;, subtitle = &quot;Reponse count by business owner, age, and politics.&quot;) Fit the Model Fit a cumulative link model for the cumulative probability of the \\(i\\)th response falling in \\(j\\)th category or below where \\(i\\) indexes the (\\(n = 192\\)) responses, \\(j = 1, \\ldots, J\\) indexes the (\\(J = 4\\)) response categories, and \\(\\theta_j\\) is the threshold for the \\(j\\)th cumulative logit. \\[\\mathrm{logit}(P(Y_i \\le j)) = \\theta_j - \\beta_1(\\mathrm{politics}_i) - \\beta_2(\\mathrm{biz\\_owner}_i) - \\beta_3(\\mathrm{age}_i)\\] cs3$fmla &lt;- formula(tax_too_high ~ biz_owner + age + politics) cs3$result &lt;- ordinal::clm(cs3$fmla, data = cs3$dat) cs3$result %&gt;% summary() ## formula: tax_too_high ~ biz_owner + age + politics ## data: cs3$dat ## ## link threshold nobs logLik AIC niter max.grad cond.H ## logit flexible 192 -197.62 409.23 6(0) 3.14e-12 3.2e+05 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## biz_ownerYes 0.66462 0.28894 2.300 0.021435 * ## age 0.24189 0.03260 7.421 1.17e-13 *** ## politicsLib 0.03695 0.36366 0.102 0.919072 ## politicsCon 1.16142 0.34554 3.361 0.000776 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Threshold coefficients: ## Estimate Std. Error z value ## Strongly Disagree|Disagree 7.026 1.166 6.024 ## Disagree|Agree 8.766 1.231 7.119 ## Agree|Strongly Agree 11.653 1.357 8.590 The summary object shows several fit statistics. More about these in the fit evaluation section below. The Coefficients table is the familiar parameter estimates. The coefficient estimate for biz_ownerYes is 0.665 with standard error 0.289, \\(z = \\hat{\\beta} / se =\\) 2.300, and \\(p = 2 \\cdot P(Z&gt;z) =\\) 0.021. Some programs (e.g., SPSS) also show the Wald chi-squared statistic, \\(z^2 =\\) 5.291. The square of a normal variable has a \\(\\chi^2\\) distribution, so the p value for the Wald chi-squared statistic is pchisq(z^2, df = 1) = 0.021. The Threshold coefficients table are the intercepts, or cut-points. The first cut-point is the log-odds of response level Strongly Disagree (or less) vs greater than Strongly Disagree when all factor variables are at their reference level and the continuous vars are at 0. There may be interaction effects between biz_owner and politics. You can check this by comparing the log likelihood to the saturated model with a likelihood ratio test. saturated &lt;- ordinal::clm(tax_too_high ~ biz_owner*politics + age, data = cs3$dat) (cs3$sat_anova &lt;- anova(cs3$result, saturated)) ## Likelihood ratio tests of cumulative link models: ## ## formula: link: threshold: ## cs3$result cs3$fmla logit flexible ## saturated tax_too_high ~ biz_owner * politics + age logit flexible ## ## no.par AIC logLik LR.stat df Pr(&gt;Chisq) ## cs3$result 7 409.23 -197.62 ## saturated 9 411.75 -196.87 1.4805 2 0.477 The likelihood ratio test indicates the main-effects model fits about the same as the saturated model, \\(\\chi^2\\)(2) = 1.48, p = 0.477) Assumptions Cumulative odds ordinal logistic regression with proportional odds models require a) no multicollinearity, and b) proportional odds. Multicollinearity occurs when two or more independent variables are highly correlated so that they do not provide unique or independent information in the regression model. Multicollinearity inflates the variances of the estimated coefficients, resulting in larger confidence intervals. The usual interpretation of a slope coefficient as the change in the mean response per unit increase in the predictor when all the other predictors are held constant breaks down because changing one predictor necessarily changes other predictors. Test for multicollinearity with variance inflation factors (VIF). The VIF is the inflation percentage of the parameter variance due to multicollinearity. E.g., a VIF of 1.9 means the parameter variance is 90% larger than what it would be if it was not correlated with other predictors. Predictor k’s variance, \\(Var(\\hat{\\beta_k})\\), is inflated by a factor of \\[\\mathrm{VIF}_k = \\frac{1}{1 - R_k^2}\\] due to collinearity with other predictors, where \\(R_k^2\\) is the \\(R^2\\) of a regression of the \\(k^{th}\\) predictor on the remaining predictors. If predictor \\(k\\) is unrelated to the other variables, \\(R_k^2 = 0\\) and \\(VIF = 1\\) (no variance inflation). If 100% of the variance in predictor \\(k\\) is explained by the other predictors, then \\(R_k^2 = 1\\) and \\(VIF = \\infty\\). The rule of thumb is that \\(VIF \\le 5\\) is acceptable. # Cannot use CLM model with vif(). Re-express as a linear model. lm(as.numeric(tax_too_high) ~ politics + biz_owner + age, dat = cs3$dat) %&gt;% car::vif() ## GVIF Df GVIF^(1/(2*Df)) ## politics 1.035831 2 1.008840 ## biz_owner 1.023642 1 1.011752 ## age 1.036491 1 1.018082 The VIFs in column GVIF are all below 5, so this model is not compromised by multicollinearity. The proportional odds assumption means the independent variable effects are constant across each cumulative split of the ordinal dependent variable. Test for proportional odds using a full likelihood ratio test comparing the proportional odds model with a multinomial logit model, also called an unconstrained baseline logit model. This is also called the test of parallel lines. The multinomial logit model fits a slope to each of the \\(J – 1\\) levels. The proportional odds model is nested within the multinomial model, so you can use a likelihood ratio test to see if the models are statistically different. Fit the proportional odds model and a multinomial model using VGAM::vglm() and capture the log likelihoods and degrees of freedom. Perform a likelihood ratio test on the differences in log likelihoods, \\(D = -2 \\mathrm{loglik}(\\beta)\\). cs3$vglm_ordinal &lt;- VGAM::vglm(cs3$fmla, VGAM::propodds, data = cs3$dat) cs3$vglm_multinomial &lt;- VGAM::vglm(cs3$fmla, VGAM::cumulative, data = cs3$dat) (cs3$po_lrt &lt;- VGAM::lrtest(cs3$vglm_multinomial, cs3$vglm_ordinal)) ## Likelihood ratio test ## ## Model 1: tax_too_high ~ biz_owner + age + politics ## Model 2: tax_too_high ~ biz_owner + age + politics ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 561 -193.31 ## 2 569 -197.62 8 8.6197 0.3754 The assumption of proportional odds was met, as assessed by a full likelihood ratio test comparing the fit of the proportional odds model to a model with varying location parameters, \\(\\chi^2\\)(8) = 8.620, p = 0.375. Another option is the partial proportional odds test. This test locates specific variables causing the rejection of proportional odds. (cs3$po_lrt2 &lt;- ordinal::clm(cs3$fmla, data = cs3$dat) %&gt;% ordinal::nominal_test()) ## Tests of nominal effects ## ## formula: tax_too_high ~ biz_owner + age + politics ## Df logLik AIC LRT Pr(&gt;Chi) ## &lt;none&gt; -197.62 409.23 ## biz_owner 2 -197.34 412.67 0.55974 0.7559 ## age ## politics 4 -196.20 414.40 2.83415 0.5860 The assumption of proportional odds was met, as assessed by a full likelihood ratio test comparing the fit of the proportional odds model to a model with varying location parameters for business owner, \\(\\chi^2\\)(2) = 0.560, p = 0.756 and politics, \\(\\chi^2\\)(4) = 2.834, p = 0.586. Evaluate the Fit There are three ways to assess overall model fit: The Deviance and Pearson goodness-of-fit tests of the overall model fit; the Cox and Snell, Nagelkerke, and McFadden pseudo R measures of explained variance; and the likelihood ratio test comparing the model fit to the intercept-only model. However, these tests rely on large frequencies in each cell, that is, each possible combination of predictor values. Overall goodness-of-fit statistics should be treated with suspicion when a continuous independent variable is present and/or there are a large number of cells with zero frequency. The Pearson goodness-of-fit statistic is \\(X^2 = \\sum \\frac{(O_{ij} - E_{ij})^2}{E_{ij}}\\) where \\(i\\) is the observation number and \\(j\\) is the response variable level. It is a summary of the Pearson residuals, the difference between the observed and expected cell counts, \\(O_{ij} - E_{ij}\\). The deviance goodness-of-fit statistic is the difference in fit between the model and a full model; a full model being a model that fits the data perfectly, \\(G^2 = 2 \\sum_{ij} O_{ij} \\log \\left( \\frac{O_{ij}}{E_{ij}} \\right)\\). Neither of these tests are reliable if there are many cells with zero frequencies and/or small expected frequencies and are generally not recommended. Generally, the chi-squared test requires a frequency count of at least 5 per cell. # Observed combinations of model vars cs3$cell_patterns &lt;- cs3$dat %&gt;% count(biz_owner, age, politics, tax_too_high) %&gt;% nrow() # Observed combinations of predictor vars * levels of response var cs3$covariate_patterns &lt;- cs3$dat %&gt;% count(biz_owner, age, politics) %&gt;% nrow() cs3$possible_cells &lt;- cs3$covariate_patterns * length(levels(cs3$dat$tax_too_high)) # 1 - ratio of observed to possible cs3$pct_freq_zero &lt;- 1 - cs3$cell_patterns / cs3$possible_cells There are 137 observed combinations of model variables (predictors), and 372 possible combinations (predictors * outcome levels), so 63.2% of cells have zero frequencies. Ideally, zero frequencies should be less than 20%, so if you were to use the deviance or Pearson tests, you would need to report this. The results below are contradictory and bogus. I think you’d only use this test if you didn’t have continuous predictor variables. observed &lt;- cs3$dat %&gt;% count(biz_owner, age, politics, tax_too_high) %&gt;% pivot_wider(names_from = tax_too_high, values_from = n, values_fill = 0) %&gt;% pivot_longer( cols = `Strongly Disagree`:`Strongly Agree`, names_to = &quot;outcome&quot;, values_to = &quot;observed&quot; ) expected &lt;- bind_cols( cs3$dat, cs3$result %&gt;% predict(newdata = cs3$dat %&gt;% select(-&quot;tax_too_high&quot;)) %&gt;% data.frame() ) %&gt;% rename_with(~str_remove(., &quot;fit\\\\.&quot;), starts_with(&quot;fit&quot;)) %&gt;% rename_with(~str_replace(., &quot;\\\\.&quot;, &quot; &quot;)) %&gt;% summarize(.by = c(biz_owner, age, politics), across(`Strongly Disagree`:`Strongly Agree`, sum)) %&gt;% pivot_longer(cols = `Strongly Disagree`:`Strongly Agree`, names_to = &quot;outcome&quot;, values_to = &quot;expected&quot;) obs_exp &lt;- observed %&gt;% inner_join(expected, by = c(&quot;politics&quot;, &quot;biz_owner&quot;, &quot;age&quot;, &quot;outcome&quot;)) %&gt;% mutate(epsilon_sq = (observed - expected)^2, chi_sq = epsilon_sq / expected, g_sq = 2 * observed * log((observed+.0001) / expected) ) cs3$chisq &lt;- list() cs3$chisq$X2 = sum(obs_exp$chi_sq) cs3$chisq$G2 = sum(obs_exp$g_sq) cs3$chisq$df = cs3$covariate_patterns * (length(levels(cs3$dat$tax_too_high)) - 1) - 7 cs3$chisq$X2_p.value = pchisq(cs3$chisq$X2, df = cs3$chisq$df, lower.tail = FALSE) cs3$chisq$G2_p.value = pchisq(cs3$chisq$G2, df = cs3$chisq$df, lower.tail = FALSE) The Pearson goodness-of-fit test indicated that the model was not a good fit to the observed data, \\(\\chi^2\\)(272) = 745.4, p &lt; .001$. The deviance goodness-of-fit test indicated that the model was a good fit to the observed data, \\(G^2\\)(272) = 232.6, p = 0.960. There are a number of measures in ordinal regression that attempt to provide a similar “variance explained” measure as that provided in ordinary least-squares linear regression. However, these measures do not have the direct interpretation that they do in ordinary linear regression and are often, therefore, referred to as “pseudo” R2 measures. The three most common measures (Cox and Snell, Nagelkerke, and McFadden) are not particularly good and not universally used. It is presented in the SPSS output, so you might encounter it in published work. cs3$nagelkerke &lt;- rcompanion::nagelkerke(cs3$result) cs3$nagelkerke$Pseudo.R.squared.for.model.vs.null ## Pseudo.R.squared ## McFadden 0.181957 ## Cox and Snell (ML) 0.367369 ## Nagelkerke (Cragg and Uhler) 0.399641 The best way to assess model fit is the likelihood ratio test comparing the model to an intercept-only model. The difference in the -2 log likelihood between the models has a \\(\\chi^2\\) distribution with degrees of freedom equal to the difference in the number of parameters. intercept_only &lt;- ordinal::clm(tax_too_high ~ 1, data = cs3$dat) cs3$lrt &lt;- anova(cs3$result, intercept_only) cs3$lrt ## Likelihood ratio tests of cumulative link models: ## ## formula: link: threshold: ## intercept_only tax_too_high ~ 1 logit flexible ## cs3$result cs3$fmla logit flexible ## ## no.par AIC logLik LR.stat df Pr(&gt;Chisq) ## intercept_only 3 489.14 -241.57 ## cs3$result 7 409.23 -197.62 87.911 4 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The table shows the log likelihoods of the two models. LR.stat is the difference between 2 * the logLik values. The final model statistically significantly predicted the dependent variable over and above the intercept-only model, \\(\\chi^2(4)\\) = 87.9, p = 0.000. Interpret Results Return to the model summary. tidy(cs3$clm) ## # A tibble: 0 × 0 The coefficients for biz_owner, age, and politics are positive. Positive parameters increase the likelihood of stronger agreement with the statement. In this case, discontent with taxes are higher for business owners, increase with age, and are higher for Liberal Democrats and Conservatives relative to the Labor Party. The expected cumulative log-odds of declaring \\(\\le j\\) level of agreement with the statement for the baseline group (biz_ownerNo, age = 0, politicsLib) is for \\(j = 1\\) (Strongly Disagree), for \\(j = 2\\) (Disagree), and for \\(j = 3\\) (Agree). You could solve the logit equation for \\[\\pi_j = \\frac{\\mathrm{exp}(Y_i)} {1 + \\mathrm{exp}(Y_i)}\\] to get the cumulative probabilities for each level. That’s what predict(type = \"cum.prob\") does. But it might be more intuitive to work with individual probabilities, the lagged differences to get the individual probabilities for each \\(j\\). That’s what predict(type = \"prob\") does. I like to play with predicted values to get a sense of the outcome distributions. In this case, I’ll take the median age, and each combination of biz_owner and politics. new_data &lt;- cs3$dat %&gt;% mutate(age = median(cs3$dat$age)) %&gt;% expand(age, politics, biz_owner) preds &lt;- predict(cs3$result, newdata = new_data, type = &quot;prob&quot;)[[&quot;fit&quot;]] %&gt;% as.data.frame() bind_cols(new_data, preds) %&gt;% pivot_longer(cols = `Strongly Disagree`:`Strongly Agree`) %&gt;% mutate(name = factor(name, levels = levels(cs3$dat$tax_too_high))) %&gt;% ggplot(aes(y = politics, x = value, fill = fct_rev(name))) + geom_col() + geom_text(aes(label = scales::percent(value, accuracy = 1)), size = 3, position = position_stack(vjust=0.5)) + facet_grid(~paste(&quot;Bus Owner = &quot;, biz_owner)) + scale_fill_grey(start = 0.5, end = 0.8) + theme_bw() + theme(legend.position = &quot;top&quot;, axis.text.x = element_blank(), axis.ticks.x = element_blank()) + guides(fill = guide_legend(reverse = TRUE)) + labs(title = &quot;Taxes too High for Conservative Business Owners?&quot;, x = NULL, fill = NULL) You will want to establish whether politics is statistically significant overall before exploring any specific contrasts. The ANOVA procedure with type I test reports an overall test of significance for each variable entered into the model. (cs3$anovaI &lt;- anova(cs3$result, type = &quot;I&quot;)) ## Type I Analysis of Deviance Table with Wald chi-square tests ## ## Df Chisq Pr(&gt;Chisq) ## biz_owner 1 13.201 0.0002798 *** ## age 1 57.413 3.533e-14 *** ## politics 2 14.636 0.0006635 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 The political party last voted for has a statistically significant effect on the prediction of whether tax is thought to be too high, Wald \\(\\chi^2\\)(2) = 14.6, p = 0.001. The best way to work with the data is with the tidy(exponentiate = TRUE) version. cs3$tidy &lt;- cs3$result %&gt;% tidy(conf.int = TRUE, exponentiate = TRUE) cs3$tidy ## # A tibble: 7 × 8 ## term estimate std.error statistic p.value conf.low conf.high coef.type ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Strongly D… 1.13e3 1.17 6.02 1.70e- 9 NA NA intercept ## 2 Disagree|A… 6.41e3 1.23 7.12 1.08e-12 NA NA intercept ## 3 Agree|Stro… 1.15e5 1.36 8.59 8.72e-18 NA NA intercept ## 4 biz_ownerY… 1.94e0 0.289 2.30 2.14e- 2 1.11 3.44 location ## 5 age 1.27e0 0.0326 7.42 1.17e-13 1.20 1.36 location ## 6 politicsLib 1.04e0 0.364 0.102 9.19e- 1 0.508 2.12 location ## 7 politicsCon 3.19e0 0.346 3.36 7.76e- 4 1.63 6.35 location Then you can summarize the table in words. The odds of business owners considering tax to be too high was 1.944 (95% CI, 1.107 to 3.443) times that of non-business owners, a statistically significant effect, z = 2.300, p = 0.021. The odds of Conservative voters considering tax to be too high was 3.194 (95% CI, 1.635 to 6.351) times that of Labour voters, a statistically significant effect, z = 3.361, p = 0.001. The odds of Liberal Democrat voters considering tax to be too high was similar to that of Labour voters (odds ratio of 1.038 (95% CI, 0.508 to 2.121), p = 0.919. An increase in age (expressed in years) was associated with an increase in the odds of considering tax too high, with an odds ratio of 1.274 (95% CI, 1.197 to 1.360), z = 7.421, p = 0.000. Reporting Here is the complete write-up. A cumulative odds ordinal logistic regression with proportional odds was run to determine the effect of business ownership, political party voted for, and age, on the belief that taxes are too high. There were proportional odds, as assessed by a full likelihood ratio test comparing the fitted model to a model with varying location parameters, \\(\\chi^2\\)(8) = 8.620, p = 0.375. The final model statistically significantly predicted the dependent variable over and above the intercept-only model, \\(\\chi^2(4)\\) = 87.9, p = 0.000. The odds of business owners considering tax to be too high was 1.944 (95% CI, 1.107 to 3.443) times that of non-business owners, a statistically significant effect, z = 2.300, p = 0.021. The political party last voted for has a statistically significant effect on the prediction of whether tax is thought to be too high, Wald \\(\\chi^2\\)(2) = 14.6, p = 0.001. The odds of Conservative voters considering tax to be too high was 3.194 (95% CI, 1.635 to 6.351) times that of Labour voters, a statistically significant effect, z = 3.361, p = 0.001. The odds of Liberal Democrat voters considering tax to be too high was similar to that of Labour voters (odds ratio of 1.038 (95% CI, 0.508 to 2.121), p = 0.919. An increase in age (expressed in years) was associated with an increase in the odds of considering tax too high, with an odds ratio of 1.274 (95% CI, 1.197 to 1.360), z = 7.421, p = 0.000. Package gtsummary shows a nice summary table. gtsummary::tbl_regression(cs3$result) #ywhnumbkmn table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ywhnumbkmn thead, #ywhnumbkmn tbody, #ywhnumbkmn tfoot, #ywhnumbkmn tr, #ywhnumbkmn td, #ywhnumbkmn th { border-style: none; } #ywhnumbkmn p { margin: 0; padding: 0; } #ywhnumbkmn .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ywhnumbkmn .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ywhnumbkmn .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ywhnumbkmn .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ywhnumbkmn .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ywhnumbkmn .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ywhnumbkmn .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ywhnumbkmn .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ywhnumbkmn .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ywhnumbkmn .gt_column_spanner_outer:first-child { padding-left: 0; } #ywhnumbkmn .gt_column_spanner_outer:last-child { padding-right: 0; } #ywhnumbkmn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ywhnumbkmn .gt_spanner_row { border-bottom-style: hidden; } #ywhnumbkmn .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ywhnumbkmn .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ywhnumbkmn .gt_from_md > :first-child { margin-top: 0; } #ywhnumbkmn .gt_from_md > :last-child { margin-bottom: 0; } #ywhnumbkmn .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ywhnumbkmn .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ywhnumbkmn .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ywhnumbkmn .gt_row_group_first td { border-top-width: 2px; } #ywhnumbkmn .gt_row_group_first th { border-top-width: 2px; } #ywhnumbkmn .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ywhnumbkmn .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ywhnumbkmn .gt_first_summary_row.thick { border-top-width: 2px; } #ywhnumbkmn .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ywhnumbkmn .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ywhnumbkmn .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ywhnumbkmn .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ywhnumbkmn .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ywhnumbkmn .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ywhnumbkmn .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ywhnumbkmn .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ywhnumbkmn .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ywhnumbkmn .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ywhnumbkmn .gt_left { text-align: left; } #ywhnumbkmn .gt_center { text-align: center; } #ywhnumbkmn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ywhnumbkmn .gt_font_normal { font-weight: normal; } #ywhnumbkmn .gt_font_bold { font-weight: bold; } #ywhnumbkmn .gt_font_italic { font-style: italic; } #ywhnumbkmn .gt_super { font-size: 65%; } #ywhnumbkmn .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ywhnumbkmn .gt_asterisk { font-size: 100%; vertical-align: 0; } #ywhnumbkmn .gt_indent_1 { text-indent: 5px; } #ywhnumbkmn .gt_indent_2 { text-indent: 10px; } #ywhnumbkmn .gt_indent_3 { text-indent: 15px; } #ywhnumbkmn .gt_indent_4 { text-indent: 20px; } #ywhnumbkmn .gt_indent_5 { text-indent: 25px; } Characteristic log(OR)1 95% CI1 p-value biz_owner     No — —     Yes 0.66 0.10, 1.2 0.021 age 0.24 0.18, 0.31 politics     Lab — —     Lib 0.04 -0.68, 0.75 >0.9     Con 1.2 0.49, 1.8 1 OR = Odds Ratio, CI = Confidence Interval 2.4 Poisson Regression Poisson models count data, like “traffic tickets per day”, or “website hits per day”. The response is an expected rate or intensity. For count data, specify the generalized model, this time with family = poisson or family = quasipoisson. Recall that the probability of achieving a count \\(y\\) when the expected rate is \\(\\lambda\\) is distributed \\[P(Y = y|\\lambda) = \\frac{e^{-\\lambda} \\lambda^y}{y!}.\\] The poisson regression model is \\[\\lambda = \\exp(X \\beta).\\] You can solve this for \\(y\\) to get \\[y = X\\beta = \\ln(\\lambda).\\] That is, the model predicts the log of the response rate. For a sample of size n, the likelihood function is \\[L(\\beta; y, X) = \\prod_{i=1}^n \\frac{e^{-\\exp({X_i\\beta})}\\exp({X_i\\beta})^{y_i}}{y_i!}.\\] The log-likelihood is \\[l(\\beta) = \\sum_{i=1}^n (y_i X_i \\beta - \\sum_{i=1}^n\\exp(X_i\\beta) - \\sum_{i=1}^n\\log(y_i!).\\] Maximizing the log-likelihood has no closed-form solution, so the coefficient estimates are found through interatively reweighted least squares. Poisson processes assume the variance of the response variable equals its mean. “Equals” means the mean and variance are of a similar order of magnitude. If that assumption does not hold, use the quasi-poisson. Use Poisson regression for large datasets. If the predicted counts are much greater than zero (&gt;30), the linear regression will work fine. Whereas RMSE is not useful for logistic models, it is a good metric in Poisson. Case Study 4 Dataset fire contains response variable injuries counting the number of injuries during the month and one explanatory variable, the month mo. fire &lt;- read_csv(file = &quot;C:/Users/mpfol/OneDrive/Documents/Data Science/Data/CivilInjury_0.csv&quot;) fire &lt;- fire %&gt;% mutate(mo = as.POSIXlt(`Injury Date`)$mon + 1) %&gt;% rename(dt = `Injury Date`, injuries = `Total Injuries`) str(fire) In a situation like this where there the relationship is bivariate, start with a visualization. ggplot(fire, aes(x = mo, y = injuries)) + geom_jitter() + geom_smooth(method = &quot;glm&quot;, method.args = list(family = &quot;poisson&quot;)) + labs(title = &quot;Injuries by Month&quot;) Fit a poisson regression in R using glm(formula, data, family = poisson). But first, check whether the mean and variance of injuries are the same magnitude? If not, then use family = quasipoisson. mean(fire$injuries) var(fire$injuries) They are of the same magnitude, so fit the regression with family = poisson. m2 &lt;- glm(injuries ~ mo, family = poisson, data = fire) summary(m2) The predicted value \\(\\hat{y}\\) is the estimated log of the response variable, \\[\\hat{y} = X \\hat{\\beta} = \\ln (\\lambda).\\] Suppose mo is January (mo = ), then the log ofinjuries` is \\(\\hat{y} = 0.323787\\). Or, more intuitively, the expected count of injuries is \\(\\exp(0.323787) = 1.38\\) predict(m2, newdata = data.frame(mo=1)) predict(m2, newdata = data.frame(mo=1), type = &quot;response&quot;) Here is a plot of the predicted counts in red. augment(m2, type.predict = &quot;response&quot;) %&gt;% ggplot(aes(x = mo, y = injuries)) + geom_point() + geom_point(aes(y = .fitted), color = &quot;red&quot;) + scale_y_continuous(limits = c(0, NA)) + labs(x = &quot;Month&quot;, y = &quot;Injuries&quot;, title = &quot;Poisson Fitted Line Plot&quot;) Evaluate a logistic model fit with an analysis of deviance. (perf &lt;- glance(m2)) (pseudoR2 &lt;- 1 - perf$deviance / perf$null.deviance) The deviance of the null model (no regressors) is 139.9. The deviance of the full model is 132.2. The psuedo-R2 is very low at .05. How about the RMSE? RMSE(pred = predict(m2, type = &quot;response&quot;), obs = fire$injuries) The average prediction error is about 0.99. That’s almost as much as the variance of injuries - i.e., just predicting the mean of injuries would be almost as good! Use the GainCurvePlot() function to plot the gain curve. augment(m2, type.predict = &quot;response&quot;) %&gt;% ggplot(aes(x = injuries, y = .fitted)) + geom_point() + geom_smooth(method =&quot;lm&quot;) + labs(x = &quot;Actual&quot;, y = &quot;Predicted&quot;, title = &quot;Poisson Fitted vs Actual&quot;) augment(m2) %&gt;% data.frame() %&gt;% GainCurvePlot(xvar = &quot;.fitted&quot;, truthVar = &quot;injuries&quot;, title = &quot;Poisson Model&quot;) It seems that mo was a poor predictor of injuries. library(broom) # for augment() library(WVPlots) # for GainCurvePlot() library(caret) # for RMSE() library(foreign) library(readr) library(gtsummary) library(nnet) library(VGAM) library(mlogit) library(ordinal) library(scales) library(glue) References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
